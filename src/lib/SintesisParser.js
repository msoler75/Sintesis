// Generated from ./src/grammar/SintesisParser.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';
import SintesisParserVisitor from './SintesisParserVisitor.js';

import SintesisParserBase from './SintesisParserBase.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0083\u0344\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0003\u0002\u0005\u0002\u0090\n\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0006\u0003\u0095\n\u0003\r\u0003\u000e\u0003\u0096",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u00a7\n\u0004\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u00ab\n\u0005\u0003\u0005\u0003\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003",
    "\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0005\n\u00c0\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0005\u000b\u00c6\n\u000b\u0005\u000b\u00c8\n\u000b\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u00d0\n\f\u0003\f\u0003\f\u0005",
    "\f\u00d4\n\f\u0005\f\u00d6\n\f\u0003\f\u0003\f\u0003\f\u0005\f\u00db",
    "\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u00f2\n\f\f\f\u000e\f\u00f5",
    "\u000b\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u00fc\n\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0121",
    "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u014f\n\u000e\f\u000e",
    "\u000e\u000e\u0152\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u015f\n\u0010\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0163\n\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u016b\n\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0007\u0014\u0170\n\u0014\f\u0014\u000e\u0014",
    "\u0173\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0178",
    "\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u017c\n\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u0180\n\u0015\u0003\u0015\u0005\u0015\u0183",
    "\n\u0015\u0003\u0016\u0006\u0016\u0186\n\u0016\r\u0016\u000e\u0016\u0187",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u018d\n\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u019e\n\u0018\u0003\u0019",
    "\u0005\u0019\u01a1\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u01ac\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01b6\n",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01bb\n\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u01c2\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01c6\n\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u01ca\n\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01d1\n\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u01da\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u01e0\n\u001a\u0003\u001a\u0005\u001a\u01e3",
    "\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01e7\n\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01ed\n\u001a\u0003",
    "\u001a\u0005\u001a\u01f0\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u01f6\n\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u01fa\n\u001a\u0003\u001b\u0003\u001b\u0005\u001b\u01fe\n\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0209\n\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    " \u0003 \u0005 \u0213\n \u0003 \u0003 \u0005 \u0217\n \u0005 \u0219",
    "\n \u0003 \u0003 \u0003!\u0006!\u021e\n!\r!\u000e!\u021f\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0005\"\u0226\n\"\u0003#\u0003#\u0003#\u0005#\u022b",
    "\n#\u0003$\u0003$\u0003$\u0007$\u0230\n$\f$\u000e$\u0233\u000b$\u0003",
    "%\u0005%\u0236\n%\u0003%\u0003%\u0003%\u0003%\u0005%\u023c\n%\u0003",
    "%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0005&\u0245\n&\u0003&\u0003",
    "&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u024e\n\'\f\'\u000e",
    "\'\u0251\u000b\'\u0005\'\u0253\n\'\u0003\'\u0003\'\u0003(\u0003(\u0003",
    ")\u0005)\u025a\n)\u0003)\u0003)\u0003)\u0003)\u0005)\u0260\n)\u0003",
    ")\u0003)\u0003)\u0005)\u0265\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005",
    ")\u026c\n)\u0005)\u026e\n)\u0003)\u0003)\u0003)\u0005)\u0273\n)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0005)\u027a\n)\u0005)\u027c\n)\u0003",
    ")\u0003)\u0003*\u0006*\u0281\n*\r*\u000e*\u0282\u0003+\u0005+\u0286",
    "\n+\u0003+\u0003+\u0003+\u0007+\u028b\n+\f+\u000e+\u028e\u000b+\u0003",
    ",\u0005,\u0291\n,\u0003,\u0005,\u0294\n,\u0003,\u0003,\u0003,\u0005",
    ",\u0299\n,\u0003,\u0003,\u0003,\u0003-\u0003-\u0005-\u02a0\n-\u0003",
    ".\u0006.\u02a3\n.\r.\u000e.\u02a4\u0003/\u0003/\u0005/\u02a9\n/\u0003",
    "/\u0003/\u0005/\u02ad\n/\u0005/\u02af\n/\u0003/\u0003/\u0003/\u0003",
    "0\u00030\u00050\u02b6\n0\u00030\u00030\u00031\u00061\u02bb\n1\r1\u000e",
    "1\u02bc\u00032\u00032\u00032\u00052\u02c2\n2\u00033\u00033\u00033\u0003",
    "4\u00034\u00034\u00054\u02ca\n4\u00035\u00035\u00035\u00035\u00075\u02d0",
    "\n5\f5\u000e5\u02d3\u000b5\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00056\u02dc\n6\u00037\u00037\u00057\u02e0\n7\u00038\u0003",
    "8\u00038\u00058\u02e5\n8\u00038\u00038\u00038\u00038\u00038\u00038\u0005",
    "8\u02ed\n8\u00039\u00039\u00039\u00059\u02f2\n9\u00039\u00059\u02f5",
    "\n9\u0003:\u0003:\u0005:\u02f9\n:\u0003;\u0003;\u0003<\u0003<\u0003",
    "<\u0005<\u0300\n<\u0003=\u0003=\u0003=\u0003=\u0005=\u0306\n=\u0003",
    "=\u0003=\u0003>\u0003>\u0003>\u0003>\u0007>\u030e\n>\f>\u000e>\u0311",
    "\u000b>\u0005>\u0313\n>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0007?\u0320\n?\f?\u000e?\u0323\u000b",
    "?\u0005?\u0325\n?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0005@\u0330\n@\u0003A\u0003A\u0003B\u0003B\u0003C\u0003C\u0003",
    "D\u0003D\u0003E\u0003E\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0005",
    "G\u0342\nG\u0003G\u0002\u0004\u0016\u001aH\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u0002\u0015\u0004\u0002==\u0080\u0080\u0004\u0002fh\u0080\u0080",
    "\u0003\u0002\u0013\u0014\u0003\u0002\u0019\u001b\u0003\u0002\u0015\u0016",
    "\u0003\u0002\u001f!\u0003\u0002\"#\u0003\u0002()\u0003\u0002&\'\u0003",
    "\u0002*,\u0003\u0002-.\u0003\u0002UV\u0004\u0002\u000e\u000eUU\u0004",
    "\u0002JJLL\u0003\u0002}\u007f\u0004\u0002^^ss\u0003\u0002/:\u0003\u0002",
    "=A\u0007\u0002HRTVXXZ\\vv\u0002\u03a7\u0002\u008f\u0003\u0002\u0002",
    "\u0002\u0004\u0094\u0003\u0002\u0002\u0002\u0006\u00a6\u0003\u0002\u0002",
    "\u0002\b\u00a8\u0003\u0002\u0002\u0002\n\u00ae\u0003\u0002\u0002\u0002",
    "\f\u00b1\u0003\u0002\u0002\u0002\u000e\u00b3\u0003\u0002\u0002\u0002",
    "\u0010\u00b6\u0003\u0002\u0002\u0002\u0012\u00bf\u0003\u0002\u0002\u0002",
    "\u0014\u00c7\u0003\u0002\u0002\u0002\u0016\u00da\u0003\u0002\u0002\u0002",
    "\u0018\u00fb\u0003\u0002\u0002\u0002\u001a\u0120\u0003\u0002\u0002\u0002",
    "\u001c\u0153\u0003\u0002\u0002\u0002\u001e\u015e\u0003\u0002\u0002\u0002",
    " \u0162\u0003\u0002\u0002\u0002\"\u0164\u0003\u0002\u0002\u0002$\u016a",
    "\u0003\u0002\u0002\u0002&\u016c\u0003\u0002\u0002\u0002(\u0174\u0003",
    "\u0002\u0002\u0002*\u0185\u0003\u0002\u0002\u0002,\u0189\u0003\u0002",
    "\u0002\u0002.\u019d\u0003\u0002\u0002\u00020\u01a0\u0003\u0002\u0002",
    "\u00022\u01f9\u0003\u0002\u0002\u00024\u01fd\u0003\u0002\u0002\u0002",
    "6\u01ff\u0003\u0002\u0002\u00028\u0202\u0003\u0002\u0002\u0002:\u0205",
    "\u0003\u0002\u0002\u0002<\u020a\u0003\u0002\u0002\u0002>\u0210\u0003",
    "\u0002\u0002\u0002@\u021d\u0003\u0002\u0002\u0002B\u0221\u0003\u0002",
    "\u0002\u0002D\u0227\u0003\u0002\u0002\u0002F\u022c\u0003\u0002\u0002",
    "\u0002H\u0235\u0003\u0002\u0002\u0002J\u0240\u0003\u0002\u0002\u0002",
    "L\u0249\u0003\u0002\u0002\u0002N\u0256\u0003\u0002\u0002\u0002P\u0259",
    "\u0003\u0002\u0002\u0002R\u0280\u0003\u0002\u0002\u0002T\u0285\u0003",
    "\u0002\u0002\u0002V\u0290\u0003\u0002\u0002\u0002X\u029f\u0003\u0002",
    "\u0002\u0002Z\u02a2\u0003\u0002\u0002\u0002\\\u02a6\u0003\u0002\u0002",
    "\u0002^\u02b3\u0003\u0002\u0002\u0002`\u02ba\u0003\u0002\u0002\u0002",
    "b\u02be\u0003\u0002\u0002\u0002d\u02c3\u0003\u0002\u0002\u0002f\u02c6",
    "\u0003\u0002\u0002\u0002h\u02cb\u0003\u0002\u0002\u0002j\u02db\u0003",
    "\u0002\u0002\u0002l\u02df\u0003\u0002\u0002\u0002n\u02ec\u0003\u0002",
    "\u0002\u0002p\u02f4\u0003\u0002\u0002\u0002r\u02f8\u0003\u0002\u0002",
    "\u0002t\u02fa\u0003\u0002\u0002\u0002v\u02ff\u0003\u0002\u0002\u0002",
    "x\u0301\u0003\u0002\u0002\u0002z\u0309\u0003\u0002\u0002\u0002|\u0316",
    "\u0003\u0002\u0002\u0002~\u032f\u0003\u0002\u0002\u0002\u0080\u0331",
    "\u0003\u0002\u0002\u0002\u0082\u0333\u0003\u0002\u0002\u0002\u0084\u0335",
    "\u0003\u0002\u0002\u0002\u0086\u0337\u0003\u0002\u0002\u0002\u0088\u0339",
    "\u0003\u0002\u0002\u0002\u008a\u033b\u0003\u0002\u0002\u0002\u008c\u0341",
    "\u0003\u0002\u0002\u0002\u008e\u0090\u0005\u0004\u0003\u0002\u008f\u008e",
    "\u0003\u0002\u0002\u0002\u008f\u0090\u0003\u0002\u0002\u0002\u0090\u0091",
    "\u0003\u0002\u0002\u0002\u0091\u0092\u0007\u0002\u0002\u0003\u0092\u0003",
    "\u0003\u0002\u0002\u0002\u0093\u0095\u0005\u0006\u0004\u0002\u0094\u0093",
    "\u0003\u0002\u0002\u0002\u0095\u0096\u0003\u0002\u0002\u0002\u0096\u0094",
    "\u0003\u0002\u0002\u0002\u0096\u0097\u0003\u0002\u0002\u0002\u0097\u0005",
    "\u0003\u0002\u0002\u0002\u0098\u00a7\u0005\b\u0005\u0002\u0099\u00a7",
    "\u0005d3\u0002\u009a\u00a7\u0005\f\u0007\u0002\u009b\u00a7\u0005\n\u0006",
    "\u0002\u009c\u00a7\u0005\u000e\b\u0002\u009d\u00a7\u0005P)\u0002\u009e",
    "\u00a7\u0005(\u0015\u0002\u009f\u00a7\u00052\u001a\u0002\u00a0\u00a7",
    "\u00056\u001c\u0002\u00a1\u00a7\u00058\u001d\u0002\u00a2\u00a7\u0005",
    ":\u001e\u0002\u00a3\u00a7\u0005<\u001f\u0002\u00a4\u00a7\u0005H%\u0002",
    "\u00a5\u00a7\u0005\u0010\t\u0002\u00a6\u0098\u0003\u0002\u0002\u0002",
    "\u00a6\u0099\u0003\u0002\u0002\u0002\u00a6\u009a\u0003\u0002\u0002\u0002",
    "\u00a6\u009b\u0003\u0002\u0002\u0002\u00a6\u009c\u0003\u0002\u0002\u0002",
    "\u00a6\u009d\u0003\u0002\u0002\u0002\u00a6\u009e\u0003\u0002\u0002\u0002",
    "\u00a6\u009f\u0003\u0002\u0002\u0002\u00a6\u00a0\u0003\u0002\u0002\u0002",
    "\u00a6\u00a1\u0003\u0002\u0002\u0002\u00a6\u00a2\u0003\u0002\u0002\u0002",
    "\u00a6\u00a3\u0003\u0002\u0002\u0002\u00a6\u00a4\u0003\u0002\u0002\u0002",
    "\u00a6\u00a5\u0003\u0002\u0002\u0002\u00a7\u0007\u0003\u0002\u0002\u0002",
    "\u00a8\u00aa\u0007\n\u0002\u0002\u00a9\u00ab\u0005\u0004\u0003\u0002",
    "\u00aa\u00a9\u0003\u0002\u0002\u0002\u00aa\u00ab\u0003\u0002\u0002\u0002",
    "\u00ab\u00ac\u0003\u0002\u0002\u0002\u00ac\u00ad\u0007\u000b\u0002\u0002",
    "\u00ad\t\u0003\u0002\u0002\u0002\u00ae\u00af\u0007G\u0002\u0002\u00af",
    "\u00b0\t\u0002\u0002\u0002\u00b0\u000b\u0003\u0002\u0002\u0002\u00b1",
    "\u00b2\u0007\f\u0002\u0002\u00b2\r\u0003\u0002\u0002\u0002\u00b3\u00b4",
    "\u0007H\u0002\u0002\u00b4\u00b5\u0005&\u0014\u0002\u00b5\u000f\u0003",
    "\u0002\u0002\u0002\u00b6\u00b7\u0006\t\u0002\u0002\u00b7\u00b8\u0005",
    "&\u0014\u0002\u00b8\u00b9\u0005\u008cG\u0002\u00b9\u0011\u0003\u0002",
    "\u0002\u0002\u00ba\u00bb\u0005\u0088E\u0002\u00bb\u00bc\u0005L\'\u0002",
    "\u00bc\u00c0\u0003\u0002\u0002\u0002\u00bd\u00be\u0007u\u0002\u0002",
    "\u00be\u00c0\u0005L\'\u0002\u00bf\u00ba\u0003\u0002\u0002\u0002\u00bf",
    "\u00bd\u0003\u0002\u0002\u0002\u00c0\u0013\u0003\u0002\u0002\u0002\u00c1",
    "\u00c8\u0005L\'\u0002\u00c2\u00c3\u0007\u0012\u0002\u0002\u00c3\u00c5",
    "\u0005\u0088E\u0002\u00c4\u00c6\u0005L\'\u0002\u00c5\u00c4\u0003\u0002",
    "\u0002\u0002\u00c5\u00c6\u0003\u0002\u0002\u0002\u00c6\u00c8\u0003\u0002",
    "\u0002\u0002\u00c7\u00c1\u0003\u0002\u0002\u0002\u00c7\u00c2\u0003\u0002",
    "\u0002\u0002\u00c8\u0015\u0003\u0002\u0002\u0002\u00c9\u00ca\b\f\u0001",
    "\u0002\u00ca\u00db\u0007q\u0002\u0002\u00cb\u00db\u0007r\u0002\u0002",
    "\u00cc\u00db\u0007u\u0002\u0002\u00cd\u00cf\u0007o\u0002\u0002\u00ce",
    "\u00d0\u0007n\u0002\u0002\u00cf\u00ce\u0003\u0002\u0002\u0002\u00cf",
    "\u00d0\u0003\u0002\u0002\u0002\u00d0\u00d5\u0003\u0002\u0002\u0002\u00d1",
    "\u00d3\u0007V\u0002\u0002\u00d2\u00d4\u0007m\u0002\u0002\u00d3\u00d2",
    "\u0003\u0002\u0002\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d6",
    "\u0003\u0002\u0002\u0002\u00d5\u00d1\u0003\u0002\u0002\u0002\u00d5\u00d6",
    "\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u00d8",
    "\u0007\u0080\u0002\u0002\u00d8\u00db\u0005L\'\u0002\u00d9\u00db\u0005",
    "\u0088E\u0002\u00da\u00c9\u0003\u0002\u0002\u0002\u00da\u00cb\u0003",
    "\u0002\u0002\u0002\u00da\u00cc\u0003\u0002\u0002\u0002\u00da\u00cd\u0003",
    "\u0002\u0002\u0002\u00da\u00d9\u0003\u0002\u0002\u0002\u00db\u00f3\u0003",
    "\u0002\u0002\u0002\u00dc\u00dd\f\b\u0002\u0002\u00dd\u00de\u0007\u0012",
    "\u0002\u0002\u00de\u00df\u0005\u0018\r\u0002\u00df\u00e0\u0005L\'\u0002",
    "\u00e0\u00f2\u0003\u0002\u0002\u0002\u00e1\u00e2\f\u0007\u0002\u0002",
    "\u00e2\u00e3\u0007\u0012\u0002\u0002\u00e3\u00f2\u0005\u0018\r\u0002",
    "\u00e4\u00e5\f\u0006\u0002\u0002\u00e5\u00e6\u0007\u0006\u0002\u0002",
    "\u00e6\u00e7\u0005\u001a\u000e\u0002\u00e7\u00e8\u0007\u0007\u0002\u0002",
    "\u00e8\u00e9\u0005L\'\u0002\u00e9\u00f2\u0003\u0002\u0002\u0002\u00ea",
    "\u00eb\f\u0005\u0002\u0002\u00eb\u00ec\u0007\u0006\u0002\u0002\u00ec",
    "\u00ed\u0005\u001a\u000e\u0002\u00ed\u00ee\u0007\u0007\u0002\u0002\u00ee",
    "\u00f2\u0003\u0002\u0002\u0002\u00ef\u00f0\f\u0004\u0002\u0002\u00f0",
    "\u00f2\u0005L\'\u0002\u00f1\u00dc\u0003\u0002\u0002\u0002\u00f1\u00e1",
    "\u0003\u0002\u0002\u0002\u00f1\u00e4\u0003\u0002\u0002\u0002\u00f1\u00ea",
    "\u0003\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002\u0002\u0002\u00f2\u00f5",
    "\u0003\u0002\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4",
    "\u0003\u0002\u0002\u0002\u00f4\u0017\u0003\u0002\u0002\u0002\u00f5\u00f3",
    "\u0003\u0002\u0002\u0002\u00f6\u00fc\u0007q\u0002\u0002\u00f7\u00fc",
    "\u0007r\u0002\u0002\u00f8\u00fc\u0007u\u0002\u0002\u00f9\u00fc\u0007",
    "t\u0002\u0002\u00fa\u00fc\u0005\u0088E\u0002\u00fb\u00f6\u0003\u0002",
    "\u0002\u0002\u00fb\u00f7\u0003\u0002\u0002\u0002\u00fb\u00f8\u0003\u0002",
    "\u0002\u0002\u00fb\u00f9\u0003\u0002\u0002\u0002\u00fb\u00fa\u0003\u0002",
    "\u0002\u0002\u00fc\u0019\u0003\u0002\u0002\u0002\u00fd\u00fe\b\u000e",
    "\u0001\u0002\u00fe\u0121\u0005n8\u0002\u00ff\u0100\u0005$\u0013\u0002",
    "\u0100\u0101\u0005L\'\u0002\u0101\u0121\u0003\u0002\u0002\u0002\u0102",
    "\u0121\u0007\u0005\u0002\u0002\u0103\u0104\u0007e\u0002\u0002\u0104",
    "\u0105\u0007\u0012\u0002\u0002\u0105\u0106\t\u0003\u0002\u0002\u0106",
    "\u0121\u0005L\'\u0002\u0107\u0108\t\u0004\u0002\u0002\u0108\u0121\u0005",
    "\u001a\u000e\u001a\u0109\u010a\u0007\u0015\u0002\u0002\u010a\u0121\u0005",
    "\u001a\u000e\u0019\u010b\u010c\u0007\u0016\u0002\u0002\u010c\u0121\u0005",
    "\u001a\u000e\u0018\u010d\u010e\u0007\u0017\u0002\u0002\u010e\u0121\u0005",
    "\u001a\u000e\u0017\u010f\u0110\u0007\u0018\u0002\u0002\u0110\u0121\u0005",
    "\u001a\u000e\u0016\u0111\u0112\u0005\u0016\f\u0002\u0112\u0113\u0007",
    "\u000e\u0002\u0002\u0113\u0114\u0005\u001a\u000e\b\u0114\u0121\u0003",
    "\u0002\u0002\u0002\u0115\u0116\u0005\u0016\f\u0002\u0116\u0117\u0005",
    "t;\u0002\u0117\u0118\u0005\u001a\u000e\u0007\u0118\u0121\u0003\u0002",
    "\u0002\u0002\u0119\u0121\u0005h5\u0002\u011a\u011b\u0007\b\u0002\u0002",
    "\u011b\u011c\u0005\u001a\u000e\u0002\u011c\u011d\u0007\t\u0002\u0002",
    "\u011d\u0121\u0003\u0002\u0002\u0002\u011e\u0121\u0005\u0016\f\u0002",
    "\u011f\u0121\u0005~@\u0002\u0120\u00fd\u0003\u0002\u0002\u0002\u0120",
    "\u00ff\u0003\u0002\u0002\u0002\u0120\u0102\u0003\u0002\u0002\u0002\u0120",
    "\u0103\u0003\u0002\u0002\u0002\u0120\u0107\u0003\u0002\u0002\u0002\u0120",
    "\u0109\u0003\u0002\u0002\u0002\u0120\u010b\u0003\u0002\u0002\u0002\u0120",
    "\u010d\u0003\u0002\u0002\u0002\u0120\u010f\u0003\u0002\u0002\u0002\u0120",
    "\u0111\u0003\u0002\u0002\u0002\u0120\u0115\u0003\u0002\u0002\u0002\u0120",
    "\u0119\u0003\u0002\u0002\u0002\u0120\u011a\u0003\u0002\u0002\u0002\u0120",
    "\u011e\u0003\u0002\u0002\u0002\u0120\u011f\u0003\u0002\u0002\u0002\u0121",
    "\u0150\u0003\u0002\u0002\u0002\u0122\u0123\f\u0015\u0002\u0002\u0123",
    "\u0124\t\u0005\u0002\u0002\u0124\u014f\u0005\u001a\u000e\u0016\u0125",
    "\u0126\f\u0014\u0002\u0002\u0126\u0127\t\u0006\u0002\u0002\u0127\u014f",
    "\u0005\u001a\u000e\u0015\u0128\u0129\f\u0013\u0002\u0002\u0129\u012a",
    "\t\u0007\u0002\u0002\u012a\u014f\u0005\u001a\u000e\u0014\u012b\u012c",
    "\f\u0012\u0002\u0002\u012c\u012d\u0007\u001c\u0002\u0002\u012d\u014f",
    "\u0005\u001a\u000e\u0012\u012e\u012f\f\u0011\u0002\u0002\u012f\u0130",
    "\t\b\u0002\u0002\u0130\u014f\u0005\u001a\u000e\u0012\u0131\u0132\f\u0010",
    "\u0002\u0002\u0132\u0133\u0007$\u0002\u0002\u0133\u014f\u0005\u001a",
    "\u000e\u0011\u0134\u0135\f\u000f\u0002\u0002\u0135\u0136\u0007%\u0002",
    "\u0002\u0136\u014f\u0005\u001a\u000e\u0010\u0137\u0138\f\r\u0002\u0002",
    "\u0138\u0139\t\t\u0002\u0002\u0139\u014f\u0005\u001a\u000e\u000e\u013a",
    "\u013b\f\f\u0002\u0002\u013b\u013c\t\n\u0002\u0002\u013c\u014f\u0005",
    "\u001a\u000e\r\u013d\u013e\f\u000b\u0002\u0002\u013e\u013f\t\u000b\u0002",
    "\u0002\u013f\u014f\u0005\u001a\u000e\f\u0140\u0141\f\n\u0002\u0002\u0141",
    "\u0142\t\f\u0002\u0002\u0142\u014f\u0005\u001a\u000e\u000b\u0143\u0144",
    "\f\t\u0002\u0002\u0144\u0145\u0007\u000f\u0002\u0002\u0145\u0146\u0005",
    "\u001a\u000e\u0002\u0146\u0147\u0007\u0010\u0002\u0002\u0147\u0148\u0005",
    "\u001a\u000e\n\u0148\u014f\u0003\u0002\u0002\u0002\u0149\u014a\f\u001b",
    "\u0002\u0002\u014a\u014f\t\u0004\u0002\u0002\u014b\u014c\f\u000e\u0002",
    "\u0002\u014c\u014d\u0007v\u0002\u0002\u014d\u014f\u0005\u0088E\u0002",
    "\u014e\u0122\u0003\u0002\u0002\u0002\u014e\u0125\u0003\u0002\u0002\u0002",
    "\u014e\u0128\u0003\u0002\u0002\u0002\u014e\u012b\u0003\u0002\u0002\u0002",
    "\u014e\u012e\u0003\u0002\u0002\u0002\u014e\u0131\u0003\u0002\u0002\u0002",
    "\u014e\u0134\u0003\u0002\u0002\u0002\u014e\u0137\u0003\u0002\u0002\u0002",
    "\u014e\u013a\u0003\u0002\u0002\u0002\u014e\u013d\u0003\u0002\u0002\u0002",
    "\u014e\u0140\u0003\u0002\u0002\u0002\u014e\u0143\u0003\u0002\u0002\u0002",
    "\u014e\u0149\u0003\u0002\u0002\u0002\u014e\u014b\u0003\u0002\u0002\u0002",
    "\u014f\u0152\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002\u0002",
    "\u0150\u0151\u0003\u0002\u0002\u0002\u0151\u001b\u0003\u0002\u0002\u0002",
    "\u0152\u0150\u0003\u0002\u0002\u0002\u0153\u0154\u0007h\u0002\u0002",
    "\u0154\u001d\u0003\u0002\u0002\u0002\u0155\u015f\u0007`\u0002\u0002",
    "\u0156\u015f\u0007c\u0002\u0002\u0157\u015f\u0007d\u0002\u0002\u0158",
    "\u015f\u0007g\u0002\u0002\u0159\u015f\u0007f\u0002\u0002\u015a\u015f",
    "\u0007j\u0002\u0002\u015b\u015f\u0007i\u0002\u0002\u015c\u015f\u0007",
    "k\u0002\u0002\u015d\u015f\u0007x\u0002\u0002\u015e\u0155\u0003\u0002",
    "\u0002\u0002\u015e\u0156\u0003\u0002\u0002\u0002\u015e\u0157\u0003\u0002",
    "\u0002\u0002\u015e\u0158\u0003\u0002\u0002\u0002\u015e\u0159\u0003\u0002",
    "\u0002\u0002\u015e\u015a\u0003\u0002\u0002\u0002\u015e\u015b\u0003\u0002",
    "\u0002\u0002\u015e\u015c\u0003\u0002\u0002\u0002\u015e\u015d\u0003\u0002",
    "\u0002\u0002\u015f\u001f\u0003\u0002\u0002\u0002\u0160\u0163\u0007a",
    "\u0002\u0002\u0161\u0163\u0007l\u0002\u0002\u0162\u0160\u0003\u0002",
    "\u0002\u0002\u0162\u0161\u0003\u0002\u0002\u0002\u0163!\u0003\u0002",
    "\u0002\u0002\u0164\u0165\u0007b\u0002\u0002\u0165#\u0003\u0002\u0002",
    "\u0002\u0166\u016b\u0005\u001c\u000f\u0002\u0167\u016b\u0005\u001e\u0010",
    "\u0002\u0168\u016b\u0005 \u0011\u0002\u0169\u016b\u0005\"\u0012\u0002",
    "\u016a\u0166\u0003\u0002\u0002\u0002\u016a\u0167\u0003\u0002\u0002\u0002",
    "\u016a\u0168\u0003\u0002\u0002\u0002\u016a\u0169\u0003\u0002\u0002\u0002",
    "\u016b%\u0003\u0002\u0002\u0002\u016c\u0171\u0005\u001a\u000e\u0002",
    "\u016d\u016e\u0007\r\u0002\u0002\u016e\u0170\u0005\u001a\u000e\u0002",
    "\u016f\u016d\u0003\u0002\u0002\u0002\u0170\u0173\u0003\u0002\u0002\u0002",
    "\u0171\u016f\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002",
    "\u0172\'\u0003\u0002\u0002\u0002\u0173\u0171\u0003\u0002\u0002\u0002",
    "\u0174\u0175\u0007X\u0002\u0002\u0175\u0177\u0005\u001a\u000e\u0002",
    "\u0176\u0178\u0007Y\u0002\u0002\u0177\u0176\u0003\u0002\u0002\u0002",
    "\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002",
    "\u0179\u017b\u0005\u0006\u0004\u0002\u017a\u017c\u0005*\u0016\u0002",
    "\u017b\u017a\u0003\u0002\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002",
    "\u017c\u0182\u0003\u0002\u0002\u0002\u017d\u017f\u0007[\u0002\u0002",
    "\u017e\u0180\u0007Y\u0002\u0002\u017f\u017e\u0003\u0002\u0002\u0002",
    "\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002",
    "\u0181\u0183\u0005\u0006\u0004\u0002\u0182\u017d\u0003\u0002\u0002\u0002",
    "\u0182\u0183\u0003\u0002\u0002\u0002\u0183)\u0003\u0002\u0002\u0002",
    "\u0184\u0186\u0005,\u0017\u0002\u0185\u0184\u0003\u0002\u0002\u0002",
    "\u0186\u0187\u0003\u0002\u0002\u0002\u0187\u0185\u0003\u0002\u0002\u0002",
    "\u0187\u0188\u0003\u0002\u0002\u0002\u0188+\u0003\u0002\u0002\u0002",
    "\u0189\u018a\u0007Z\u0002\u0002\u018a\u018c\u0005\u001a\u000e\u0002",
    "\u018b\u018d\u0007Y\u0002\u0002\u018c\u018b\u0003\u0002\u0002\u0002",
    "\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002",
    "\u018e\u018f\u0005\u0006\u0004\u0002\u018f-\u0003\u0002\u0002\u0002",
    "\u0190\u0191\u0007\u0080\u0002\u0002\u0191\u0192\t\r\u0002\u0002\u0192",
    "\u019e\u0005\u001a\u000e\u0002\u0193\u0194\u0007\u0080\u0002\u0002\u0194",
    "\u0195\u0007\r\u0002\u0002\u0195\u0196\u0007\u0080\u0002\u0002\u0196",
    "\u0197\t\r\u0002\u0002\u0197\u019e\u0005\u001a\u000e\u0002\u0198\u0199",
    "\u0007\u0080\u0002\u0002\u0199\u019a\u0007;\u0002\u0002\u019a\u019b",
    "\u0007\u0080\u0002\u0002\u019b\u019c\t\r\u0002\u0002\u019c\u019e\u0005",
    "\u001a\u000e\u0002\u019d\u0190\u0003\u0002\u0002\u0002\u019d\u0193\u0003",
    "\u0002\u0002\u0002\u019d\u0198\u0003\u0002\u0002\u0002\u019e/\u0003",
    "\u0002\u0002\u0002\u019f\u01a1\u0007{\u0002\u0002\u01a0\u019f\u0003",
    "\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003",
    "\u0002\u0002\u0002\u01a2\u01a3\u0005\u0088E\u0002\u01a3\u01a4\t\u000e",
    "\u0002\u0002\u01a4\u01a5\u0005\u001a\u000e\u0002\u01a5\u01a6\u0007W",
    "\u0002\u0002\u01a6\u01a7\u0005\u001a\u000e\u0002\u01a71\u0003\u0002",
    "\u0002\u0002\u01a8\u01a9\u0007J\u0002\u0002\u01a9\u01ab\u0005\u001a",
    "\u000e\u0002\u01aa\u01ac\u0007K\u0002\u0002\u01ab\u01aa\u0003\u0002",
    "\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002",
    "\u0002\u0002\u01ad\u01ae\u0005\u0006\u0004\u0002\u01ae\u01fa\u0003\u0002",
    "\u0002\u0002\u01af\u01b0\t\u000f\u0002\u0002\u01b0\u01b1\u0005\u0006",
    "\u0004\u0002\u01b1\u01b2\u0007I\u0002\u0002\u01b2\u01b3\u0005\u001a",
    "\u000e\u0002\u01b3\u01fa\u0003\u0002\u0002\u0002\u01b4\u01b6\u0007J",
    "\u0002\u0002\u01b5\u01b4\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002",
    "\u0002\u0002\u01b6\u01b7\u0003\u0002\u0002\u0002\u01b7\u01b8\u0007I",
    "\u0002\u0002\u01b8\u01ba\u0005\u001a\u000e\u0002\u01b9\u01bb\t\u000f",
    "\u0002\u0002\u01ba\u01b9\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003\u0002",
    "\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd\u0005\u0006",
    "\u0004\u0002\u01bd\u01fa\u0003\u0002\u0002\u0002\u01be\u01bf\u0007T",
    "\u0002\u0002\u01bf\u01c1\u0007\b\u0002\u0002\u01c0\u01c2\u00054\u001b",
    "\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002",
    "\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c5\u0007\f\u0002",
    "\u0002\u01c4\u01c6\u0005&\u0014\u0002\u01c5\u01c4\u0003\u0002\u0002",
    "\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002",
    "\u0002\u01c7\u01c9\u0007\f\u0002\u0002\u01c8\u01ca\u0005&\u0014\u0002",
    "\u01c9\u01c8\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002",
    "\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007\t\u0002\u0002",
    "\u01cc\u01fa\u0005\u0006\u0004\u0002\u01cd\u01ce\u0007T\u0002\u0002",
    "\u01ce\u01d0\u00050\u0019\u0002\u01cf\u01d1\t\u000f\u0002\u0002\u01d0",
    "\u01cf\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1",
    "\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d3\u0005\u0006\u0004\u0002\u01d3",
    "\u01fa\u0003\u0002\u0002\u0002\u01d4\u01d5\u0007T\u0002\u0002\u01d5",
    "\u01d6\u0007\b\u0002\u0002\u01d6\u01d7\u00050\u0019\u0002\u01d7\u01d9",
    "\u0007\t\u0002\u0002\u01d8\u01da\t\u000f\u0002\u0002\u01d9\u01d8\u0003",
    "\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01da\u01db\u0003",
    "\u0002\u0002\u0002\u01db\u01dc\u0005\u0006\u0004\u0002\u01dc\u01fa\u0003",
    "\u0002\u0002\u0002\u01dd\u01df\u0007T\u0002\u0002\u01de\u01e0\u0007",
    "R\u0002\u0002\u01df\u01de\u0003\u0002\u0002\u0002\u01df\u01e0\u0003",
    "\u0002\u0002\u0002\u01e0\u01e3\u0003\u0002\u0002\u0002\u01e1\u01e3\u0007",
    "S\u0002\u0002\u01e2\u01dd\u0003\u0002\u0002\u0002\u01e2\u01e1\u0003",
    "\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002\u01e4\u01e6\u0005",
    ".\u0018\u0002\u01e5\u01e7\t\u000f\u0002\u0002\u01e6\u01e5\u0003\u0002",
    "\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7\u01e8\u0003\u0002",
    "\u0002\u0002\u01e8\u01e9\u0005\u0006\u0004\u0002\u01e9\u01fa\u0003\u0002",
    "\u0002\u0002\u01ea\u01ec\u0007T\u0002\u0002\u01eb\u01ed\u0007R\u0002",
    "\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002",
    "\u0002\u01ed\u01f0\u0003\u0002\u0002\u0002\u01ee\u01f0\u0007S\u0002",
    "\u0002\u01ef\u01ea\u0003\u0002\u0002\u0002\u01ef\u01ee\u0003\u0002\u0002",
    "\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f2\u0007\b\u0002",
    "\u0002\u01f2\u01f3\u0005.\u0018\u0002\u01f3\u01f5\u0007\t\u0002\u0002",
    "\u01f4\u01f6\t\u000f\u0002\u0002\u01f5\u01f4\u0003\u0002\u0002\u0002",
    "\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002",
    "\u01f7\u01f8\u0005\u0006\u0004\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002",
    "\u01f9\u01a8\u0003\u0002\u0002\u0002\u01f9\u01af\u0003\u0002\u0002\u0002",
    "\u01f9\u01b5\u0003\u0002\u0002\u0002\u01f9\u01be\u0003\u0002\u0002\u0002",
    "\u01f9\u01cd\u0003\u0002\u0002\u0002\u01f9\u01d4\u0003\u0002\u0002\u0002",
    "\u01f9\u01e2\u0003\u0002\u0002\u0002\u01f9\u01ef\u0003\u0002\u0002\u0002",
    "\u01fa3\u0003\u0002\u0002\u0002\u01fb\u01fe\u0005&\u0014\u0002\u01fc",
    "\u01fe\u0005h5\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002\u01fd\u01fc",
    "\u0003\u0002\u0002\u0002\u01fe5\u0003\u0002\u0002\u0002\u01ff\u0200",
    "\u0007M\u0002\u0002\u0200\u0201\u0005\u008cG\u0002\u02017\u0003\u0002",
    "\u0002\u0002\u0202\u0203\u0007N\u0002\u0002\u0203\u0204\u0005\u008c",
    "G\u0002\u02049\u0003\u0002\u0002\u0002\u0205\u0208\u0007\\\u0002\u0002",
    "\u0206\u0209\u0005\u001a\u000e\u0002\u0207\u0209\u0005\u008cG\u0002",
    "\u0208\u0206\u0003\u0002\u0002\u0002\u0208\u0207\u0003\u0002\u0002\u0002",
    "\u0209;\u0003\u0002\u0002\u0002\u020a\u020b\u0007O\u0002\u0002\u020b",
    "\u020c\u0007\b\u0002\u0002\u020c\u020d\u0005&\u0014\u0002\u020d\u020e",
    "\u0007\t\u0002\u0002\u020e\u020f\u0005> \u0002\u020f=\u0003\u0002\u0002",
    "\u0002\u0210\u0212\u0007\n\u0002\u0002\u0211\u0213\u0005@!\u0002\u0212",
    "\u0211\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213",
    "\u0218\u0003\u0002\u0002\u0002\u0214\u0216\u0005D#\u0002\u0215\u0217",
    "\u0005@!\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u0216\u0217\u0003",
    "\u0002\u0002\u0002\u0217\u0219\u0003\u0002\u0002\u0002\u0218\u0214\u0003",
    "\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a\u0003",
    "\u0002\u0002\u0002\u021a\u021b\u0007\u000b\u0002\u0002\u021b?\u0003",
    "\u0002\u0002\u0002\u021c\u021e\u0005B\"\u0002\u021d\u021c\u0003\u0002",
    "\u0002\u0002\u021e\u021f\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002",
    "\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220A\u0003\u0002",
    "\u0002\u0002\u0221\u0222\u0007P\u0002\u0002\u0222\u0223\u0005&\u0014",
    "\u0002\u0223\u0225\u0007\u0010\u0002\u0002\u0224\u0226\u0005\u0004\u0003",
    "\u0002\u0225\u0224\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002\u0002",
    "\u0002\u0226C\u0003\u0002\u0002\u0002\u0227\u0228\u0007Q\u0002\u0002",
    "\u0228\u022a\u0007\u0010\u0002\u0002\u0229\u022b\u0005\u0004\u0003\u0002",
    "\u022a\u0229\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002",
    "\u022bE\u0003\u0002\u0002\u0002\u022c\u0231\u0005b2\u0002\u022d\u022e",
    "\u0007\r\u0002\u0002\u022e\u0230\u0005b2\u0002\u022f\u022d\u0003\u0002",
    "\u0002\u0002\u0230\u0233\u0003\u0002\u0002\u0002\u0231\u022f\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232G\u0003\u0002",
    "\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0234\u0236\u0007]",
    "\u0002\u0002\u0235\u0234\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002",
    "\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237\u0238\u0007^",
    "\u0002\u0002\u0238\u0239\u0005\u0088E\u0002\u0239\u023b\u0007\b\u0002",
    "\u0002\u023a\u023c\u0005F$\u0002\u023b\u023a\u0003\u0002\u0002\u0002",
    "\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002",
    "\u023d\u023e\u0007\t\u0002\u0002\u023e\u023f\u0005l7\u0002\u023fI\u0003",
    "\u0002\u0002\u0002\u0240\u0241\u0007^\u0002\u0002\u0241\u0242\u0005",
    "\u0088E\u0002\u0242\u0244\u0007\b\u0002\u0002\u0243\u0245\u0005F$\u0002",
    "\u0244\u0243\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002",
    "\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0247\u0007\t\u0002\u0002",
    "\u0247\u0248\u0005l7\u0002\u0248K\u0003\u0002\u0002\u0002\u0249\u0252",
    "\u0007\b\u0002\u0002\u024a\u024f\u0005\u001a\u000e\u0002\u024b\u024c",
    "\u0007\r\u0002\u0002\u024c\u024e\u0005\u001a\u000e\u0002\u024d\u024b",
    "\u0003\u0002\u0002\u0002\u024e\u0251\u0003\u0002\u0002\u0002\u024f\u024d",
    "\u0003\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0253",
    "\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0252\u024a",
    "\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0254",
    "\u0003\u0002\u0002\u0002\u0254\u0255\u0007\t\u0002\u0002\u0255M\u0003",
    "\u0002\u0002\u0002\u0256\u0257\t\u0010\u0002\u0002\u0257O\u0003\u0002",
    "\u0002\u0002\u0258\u025a\u0007]\u0002\u0002\u0259\u0258\u0003\u0002",
    "\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002",
    "\u0002\u0002\u025b\u025c\u0007m\u0002\u0002\u025c\u025f\u0005\u0088",
    "E\u0002\u025d\u025e\u0007p\u0002\u0002\u025e\u0260\u0005\u0088E\u0002",
    "\u025f\u025d\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002\u0002",
    "\u0260\u0261\u0003\u0002\u0002\u0002\u0261\u026d\u0007\n\u0002\u0002",
    "\u0262\u0263\u0007q\u0002\u0002\u0263\u0265\u0007\u0010\u0002\u0002",
    "\u0264\u0262\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002",
    "\u0265\u026b\u0003\u0002\u0002\u0002\u0266\u0267\u0007\n\u0002\u0002",
    "\u0267\u0268\u0005R*\u0002\u0268\u0269\u0007\u000b\u0002\u0002\u0269",
    "\u026c\u0003\u0002\u0002\u0002\u026a\u026c\u0005R*\u0002\u026b\u0266",
    "\u0003\u0002\u0002\u0002\u026b\u026a\u0003\u0002\u0002\u0002\u026c\u026e",
    "\u0003\u0002\u0002\u0002\u026d\u0264\u0003\u0002\u0002\u0002\u026d\u026e",
    "\u0003\u0002\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u027b",
    "\u0005\u008cG\u0002\u0270\u0271\u0007r\u0002\u0002\u0271\u0273\u0007",
    "\u0010\u0002\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0272\u0273\u0003",
    "\u0002\u0002\u0002\u0273\u0279\u0003\u0002\u0002\u0002\u0274\u027a\u0005",
    "Z.\u0002\u0275\u0276\u0007\n\u0002\u0002\u0276\u0277\u0005Z.\u0002\u0277",
    "\u0278\u0007\u000b\u0002\u0002\u0278\u027a\u0003\u0002\u0002\u0002\u0279",
    "\u0274\u0003\u0002\u0002\u0002\u0279\u0275\u0003\u0002\u0002\u0002\u027a",
    "\u027c\u0003\u0002\u0002\u0002\u027b\u0272\u0003\u0002\u0002\u0002\u027b",
    "\u027c\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002\u0002\u0002\u027d",
    "\u027e\u0007\u000b\u0002\u0002\u027eQ\u0003\u0002\u0002\u0002\u027f",
    "\u0281\u0005T+\u0002\u0280\u027f\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0003\u0002\u0002\u0002\u0282\u0280\u0003\u0002\u0002\u0002\u0282\u0283",
    "\u0003\u0002\u0002\u0002\u0283S\u0003\u0002\u0002\u0002\u0284\u0286",
    "\u0005N(\u0002\u0285\u0284\u0003\u0002\u0002\u0002\u0285\u0286\u0003",
    "\u0002\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u028c\u0005",
    "f4\u0002\u0288\u0289\u0007\r\u0002\u0002\u0289\u028b\u0005f4\u0002\u028a",
    "\u0288\u0003\u0002\u0002\u0002\u028b\u028e\u0003\u0002\u0002\u0002\u028c",
    "\u028a\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002\u028d",
    "U\u0003\u0002\u0002\u0002\u028e\u028c\u0003\u0002\u0002\u0002\u028f",
    "\u0291\u0005N(\u0002\u0290\u028f\u0003\u0002\u0002\u0002\u0290\u0291",
    "\u0003\u0002\u0002\u0002\u0291\u0293\u0003\u0002\u0002\u0002\u0292\u0294",
    "\t\u0011\u0002\u0002\u0293\u0292\u0003\u0002\u0002\u0002\u0293\u0294",
    "\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0296",
    "\u0005X-\u0002\u0296\u0298\u0007\b\u0002\u0002\u0297\u0299\u0005F$\u0002",
    "\u0298\u0297\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029b\u0007\t\u0002\u0002",
    "\u029b\u029c\u0005l7\u0002\u029cW\u0003\u0002\u0002\u0002\u029d\u02a0",
    "\u0005\u0088E\u0002\u029e\u02a0\u0007t\u0002\u0002\u029f\u029d\u0003",
    "\u0002\u0002\u0002\u029f\u029e\u0003\u0002\u0002\u0002\u02a0Y\u0003",
    "\u0002\u0002\u0002\u02a1\u02a3\u0005V,\u0002\u02a2\u02a1\u0003\u0002",
    "\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02a2\u0003\u0002",
    "\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5[\u0003\u0002",
    "\u0002\u0002\u02a6\u02a8\u0007o\u0002\u0002\u02a7\u02a9\u0007n\u0002",
    "\u0002\u02a8\u02a7\u0003\u0002\u0002\u0002\u02a8\u02a9\u0003\u0002\u0002",
    "\u0002\u02a9\u02ae\u0003\u0002\u0002\u0002\u02aa\u02ac\u0007V\u0002",
    "\u0002\u02ab\u02ad\u0007m\u0002\u0002\u02ac\u02ab\u0003\u0002\u0002",
    "\u0002\u02ac\u02ad\u0003\u0002\u0002\u0002\u02ad\u02af\u0003\u0002\u0002",
    "\u0002\u02ae\u02aa\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002",
    "\u0002\u02af\u02b0\u0003\u0002\u0002\u0002\u02b0\u02b1\u0007\u0080\u0002",
    "\u0002\u02b1\u02b2\u0005L\'\u0002\u02b2]\u0003\u0002\u0002\u0002\u02b3",
    "\u02b5\u0007\u0006\u0002\u0002\u02b4\u02b6\u0005\u001a\u000e\u0002\u02b5",
    "\u02b4\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6",
    "\u02b7\u0003\u0002\u0002\u0002\u02b7\u02b8\u0007\u0007\u0002\u0002\u02b8",
    "_\u0003\u0002\u0002\u0002\u02b9\u02bb\u0005^0\u0002\u02ba\u02b9\u0003",
    "\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02ba\u0003",
    "\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002\u0002\u02bda\u0003",
    "\u0002\u0002\u0002\u02be\u02c1\u0005\u0088E\u0002\u02bf\u02c0\u0007",
    "\u000e\u0002\u0002\u02c0\u02c2\u0005\u001a\u000e\u0002\u02c1\u02bf\u0003",
    "\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2c\u0003",
    "\u0002\u0002\u0002\u02c3\u02c4\u0005h5\u0002\u02c4\u02c5\u0005\u008c",
    "G\u0002\u02c5e\u0003\u0002\u0002\u0002\u02c6\u02c9\u0005\u0088E\u0002",
    "\u02c7\u02c8\u0007\u000e\u0002\u0002\u02c8\u02ca\u0005\u001a\u000e\u0002",
    "\u02c9\u02c7\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002",
    "\u02cag\u0003\u0002\u0002\u0002\u02cb\u02cc\u0005j6\u0002\u02cc\u02d1",
    "\u0005f4\u0002\u02cd\u02ce\u0007\r\u0002\u0002\u02ce\u02d0\u0005f4\u0002",
    "\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02d3\u0003\u0002\u0002\u0002",
    "\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002",
    "\u02d2i\u0003\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002",
    "\u02d4\u02dc\u0007]\u0002\u0002\u02d5\u02d6\u0007]\u0002\u0002\u02d6",
    "\u02dc\u0007{\u0002\u0002\u02d7\u02d8\u0007]\u0002\u0002\u02d8\u02dc",
    "\u0007|\u0002\u0002\u02d9\u02dc\u0007{\u0002\u0002\u02da\u02dc\u0007",
    "|\u0002\u0002\u02db\u02d4\u0003\u0002\u0002\u0002\u02db\u02d5\u0003",
    "\u0002\u0002\u0002\u02db\u02d7\u0003\u0002\u0002\u0002\u02db\u02d9\u0003",
    "\u0002\u0002\u0002\u02db\u02da\u0003\u0002\u0002\u0002\u02dck\u0003",
    "\u0002\u0002\u0002\u02dd\u02e0\u0005\b\u0005\u0002\u02de\u02e0\u0005",
    "\u0006\u0004\u0002\u02df\u02dd\u0003\u0002\u0002\u0002\u02df\u02de\u0003",
    "\u0002\u0002\u0002\u02e0m\u0003\u0002\u0002\u0002\u02e1\u02e2\u0007",
    "^\u0002\u0002\u02e2\u02e4\u0007\b\u0002\u0002\u02e3\u02e5\u0005F$\u0002",
    "\u02e4\u02e3\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002\u0002",
    "\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e7\u0007\t\u0002\u0002",
    "\u02e7\u02ed\u0005l7\u0002\u02e8\u02e9\u0005p9\u0002\u02e9\u02ea\u0007",
    ";\u0002\u0002\u02ea\u02eb\u0005r:\u0002\u02eb\u02ed\u0003\u0002\u0002",
    "\u0002\u02ec\u02e1\u0003\u0002\u0002\u0002\u02ec\u02e8\u0003\u0002\u0002",
    "\u0002\u02edo\u0003\u0002\u0002\u0002\u02ee\u02f5\u0005\u0088E\u0002",
    "\u02ef\u02f1\u0007\b\u0002\u0002\u02f0\u02f2\u0005F$\u0002\u02f1\u02f0",
    "\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2\u02f3",
    "\u0003\u0002\u0002\u0002\u02f3\u02f5\u0007\t\u0002\u0002\u02f4\u02ee",
    "\u0003\u0002\u0002\u0002\u02f4\u02ef\u0003\u0002\u0002\u0002\u02f5q",
    "\u0003\u0002\u0002\u0002\u02f6\u02f9\u0005\u001a\u000e\u0002\u02f7\u02f9",
    "\u0005l7\u0002\u02f8\u02f6\u0003\u0002\u0002\u0002\u02f8\u02f7\u0003",
    "\u0002\u0002\u0002\u02f9s\u0003\u0002\u0002\u0002\u02fa\u02fb\t\u0012",
    "\u0002\u0002\u02fbu\u0003\u0002\u0002\u0002\u02fc\u0300\u0005\u008a",
    "F\u0002\u02fd\u0300\u0007<\u0002\u0002\u02fe\u0300\u0007F\u0002\u0002",
    "\u02ff\u02fc\u0003\u0002\u0002\u0002\u02ff\u02fd\u0003\u0002\u0002\u0002",
    "\u02ff\u02fe\u0003\u0002\u0002\u0002\u0300w\u0003\u0002\u0002\u0002",
    "\u0301\u0302\u0007o\u0002\u0002\u0302\u0303\u0007w\u0002\u0002\u0303",
    "\u0305\u0007\b\u0002\u0002\u0304\u0306\u0005z>\u0002\u0305\u0304\u0003",
    "\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0307\u0003",
    "\u0002\u0002\u0002\u0307\u0308\u0007\t\u0002\u0002\u0308y\u0003\u0002",
    "\u0002\u0002\u0309\u0312\u0007\u0006\u0002\u0002\u030a\u030f\u0005\u001a",
    "\u000e\u0002\u030b\u030c\u0007\r\u0002\u0002\u030c\u030e\u0005\u001a",
    "\u000e\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030e\u0311\u0003\u0002",
    "\u0002\u0002\u030f\u030d\u0003\u0002\u0002\u0002\u030f\u0310\u0003\u0002",
    "\u0002\u0002\u0310\u0313\u0003\u0002\u0002\u0002\u0311\u030f\u0003\u0002",
    "\u0002\u0002\u0312\u030a\u0003\u0002\u0002\u0002\u0312\u0313\u0003\u0002",
    "\u0002\u0002\u0313\u0314\u0003\u0002\u0002\u0002\u0314\u0315\u0007\u0007",
    "\u0002\u0002\u0315{\u0003\u0002\u0002\u0002\u0316\u0324\u0007\n\u0002",
    "\u0002\u0317\u0318\u0005\u0088E\u0002\u0318\u0319\u0007\u0010\u0002",
    "\u0002\u0319\u0321\u0005\u001a\u000e\u0002\u031a\u031b\u0007\r\u0002",
    "\u0002\u031b\u031c\u0005\u0088E\u0002\u031c\u031d\u0007\u0010\u0002",
    "\u0002\u031d\u031e\u0005\u001a\u000e\u0002\u031e\u0320\u0003\u0002\u0002",
    "\u0002\u031f\u031a\u0003\u0002\u0002\u0002\u0320\u0323\u0003\u0002\u0002",
    "\u0002\u0321\u031f\u0003\u0002\u0002\u0002\u0321\u0322\u0003\u0002\u0002",
    "\u0002\u0322\u0325\u0003\u0002\u0002\u0002\u0323\u0321\u0003\u0002\u0002",
    "\u0002\u0324\u0317\u0003\u0002\u0002\u0002\u0324\u0325\u0003\u0002\u0002",
    "\u0002\u0325\u0326\u0003\u0002\u0002\u0002\u0326\u0327\u0007\u000b\u0002",
    "\u0002\u0327}\u0003\u0002\u0002\u0002\u0328\u0330\u0005\u0084C\u0002",
    "\u0329\u0330\u0005\u0080A\u0002\u032a\u0330\u0005\u0082B\u0002\u032b",
    "\u0330\u0005\u0086D\u0002\u032c\u0330\u0005z>\u0002\u032d\u0330\u0005",
    "|?\u0002\u032e\u0330\u0005x=\u0002\u032f\u0328\u0003\u0002\u0002\u0002",
    "\u032f\u0329\u0003\u0002\u0002\u0002\u032f\u032a\u0003\u0002\u0002\u0002",
    "\u032f\u032b\u0003\u0002\u0002\u0002\u032f\u032c\u0003\u0002\u0002\u0002",
    "\u032f\u032d\u0003\u0002\u0002\u0002\u032f\u032e\u0003\u0002\u0002\u0002",
    "\u0330\u007f\u0003\u0002\u0002\u0002\u0331\u0332\u0007F\u0002\u0002",
    "\u0332\u0081\u0003\u0002\u0002\u0002\u0333\u0334\u0007\u0081\u0002\u0002",
    "\u0334\u0083\u0003\u0002\u0002\u0002\u0335\u0336\u0007<\u0002\u0002",
    "\u0336\u0085\u0003\u0002\u0002\u0002\u0337\u0338\t\u0013\u0002\u0002",
    "\u0338\u0087\u0003\u0002\u0002\u0002\u0339\u033a\u0007\u0080\u0002\u0002",
    "\u033a\u0089\u0003\u0002\u0002\u0002\u033b\u033c\t\u0014\u0002\u0002",
    "\u033c\u008b\u0003\u0002\u0002\u0002\u033d\u0342\u0007\f\u0002\u0002",
    "\u033e\u0342\u0007\u0002\u0002\u0003\u033f\u0342\u0006G\u0016\u0002",
    "\u0340\u0342\u0006G\u0017\u0002\u0341\u033d\u0003\u0002\u0002\u0002",
    "\u0341\u033e\u0003\u0002\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002",
    "\u0341\u0340\u0003\u0002\u0002\u0002\u0342\u008d\u0003\u0002\u0002\u0002",
    "c\u008f\u0096\u00a6\u00aa\u00bf\u00c5\u00c7\u00cf\u00d3\u00d5\u00da",
    "\u00f1\u00f3\u00fb\u0120\u014e\u0150\u015e\u0162\u016a\u0171\u0177\u017b",
    "\u017f\u0182\u0187\u018c\u019d\u01a0\u01ab\u01b5\u01ba\u01c1\u01c5\u01c9",
    "\u01d0\u01d9\u01df\u01e2\u01e6\u01ec\u01ef\u01f5\u01f9\u01fd\u0208\u0212",
    "\u0216\u0218\u021f\u0225\u022a\u0231\u0235\u023b\u0244\u024f\u0252\u0259",
    "\u025f\u0264\u026b\u026d\u0272\u0279\u027b\u0282\u0285\u028c\u0290\u0293",
    "\u0298\u029f\u02a4\u02a8\u02ac\u02ae\u02b5\u02bc\u02c1\u02c9\u02d1\u02db",
    "\u02df\u02e4\u02ec\u02f1\u02f4\u02f8\u02ff\u0305\u030f\u0312\u0321\u0324",
    "\u032f\u0341"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class SintesisParser extends SintesisParserBase {

    static grammarFileName = "SintesisParser.g4";
    static literalNames = [ null, null, null, null, "'['", "']'", "'('", 
                            "')'", "'{'", "'}'", "';'", "','", null, "'?'", 
                            "':'", "'...'", "'.'", "'++'", "'--'", "'+'", 
                            "'-'", "'~'", null, "'*'", "'/'", "'%'", "'**'", 
                            "'??'", "'#'", "'>>'", "'<<'", "'>>>'", "'<'", 
                            "'>'", "'<='", "'>='", "'=='", null, "'==='", 
                            "'!=='", "'&'", "'^'", "'|'", null, null, "'*='", 
                            "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", 
                            "'>>>='", "'&='", "'^='", "'|='", "'**='", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'sub'", 
                            null, null, null, null, null, null, "'chr'", 
                            "'ord'", null, null, null, null, null, null, 
                            null, null, null, null, "'super'" ];
    static symbolicNames = [ null, "MultiLineComment", "SingleLineComment", 
                             "JavascriptCode", "OpenBracket", "CloseBracket", 
                             "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", 
                             "SemiColon", "Comma", "Assign", "QuestionMark", 
                             "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
                             "Plus", "Minus", "BitNot", "Not", "Multiply", 
                             "Divide", "Modulus", "Power", "NullCoalesce", 
                             "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", 
                             "RightShiftLogical", "LessThan", "MoreThan", 
                             "LessThanEquals", "GreaterThanEquals", "Equals_", 
                             "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                             "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                             "DivideAssign", "ModulusAssign", "PlusAssign", 
                             "MinusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                             "BitAndAssign", "BitXorAssign", "BitOrAssign", 
                             "PowerAssign", "ARROW", "NullLiteral", "DecimalLiteral", 
                             "HexIntegerLiteral", "OctalIntegerLiteral", 
                             "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                             "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                             "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                             "BooleanLiteral", "Step", "Print", "While", 
                             "Repeat", "Times", "Do", "Continue", "Break", 
                             "Switch", "Case", "Default", "Each", "ForEach", 
                             "For", "In", "Of", "To", "If", "Then", "ElseIf", 
                             "Else", "Return", "Declare", "Function_", "Delete", 
                             "NumberOf", "IndexOf", "Sub", "Lower", "Upper", 
                             "Math", "Min", "Max", "Random", "Chr", "Ord", 
                             "Prompt", "Convert", "Class_", "Instance", 
                             "New_", "Extends", "Attributes", "Methods", 
                             "Method", "Constructor", "Super", "InstanceOf", 
                             "List", "Dictionary", "Get", "Set", "Var_", 
                             "Const_", "Private", "Public", "Protected", 
                             "Identifier", "StringLiteral", "WhiteSpaces", 
                             "LineTerminator" ];
    static ruleNames = [ "program", "statementList", "statement", "block", 
                         "stepStatement", "emptyStatement_", "printStatement", 
                         "expressionStatement", "methodCall", "superSuffix", 
                         "member", "memberIdentifier", "singleExpression", 
                         "basicFunction0", "basicFunction1", "basicFunction2", 
                         "basicFunction3", "basicFunction", "expressionSequence", 
                         "ifStatement", "elseIfs", "elseIf", "iteratorIndexes", 
                         "iteratorRange", "iterationStatement", "forPre", 
                         "continueStatement", "breakStatement", "returnStatement", 
                         "switchStatement", "caseBlock", "caseClauses", 
                         "caseClause", "defaultClause", "formalParameterList", 
                         "functionDeclaration", "functionDeclarationExpr", 
                         "arguments", "visibility", "classDeclaration", 
                         "attributesList", "classAttributeDecl", "methodDeclaration", 
                         "methodName", "methodsList", "classExp", "listIndex", 
                         "listIndexes", "formalParameterArg", "variableStatement", 
                         "variableDeclaration", "variableDeclarationList", 
                         "varModifier", "functionBody", "anonymousFunction", 
                         "arrowFunctionParameters", "arrowFunctionBody", 
                         "assignmentOperator", "reservedWord", "listDeclaration", 
                         "listLiteral", "objectLiteral", "literal", "booleanLiteral", 
                         "stringLiteral", "nullLiteral", "numericLiteral", 
                         "identifier", "safeKeyword", "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SintesisParser.ruleNames;
        this.literalNames = SintesisParser.literalNames;
        this.symbolicNames = SintesisParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 7:
    	    		return this.expressionStatement_sempred(localctx, predIndex);
    	case 10:
    	    		return this.member_sempred(localctx, predIndex);
    	case 12:
    	    		return this.singleExpression_sempred(localctx, predIndex);
    	case 69:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expressionStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.notOpenBraceAndNotFunction();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    member_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 6);
    		case 2:
    			return this.precpred(this._ctx, 5);
    		case 3:
    			return this.precpred(this._ctx, 4);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    singleExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 19);
    		case 7:
    			return this.precpred(this._ctx, 18);
    		case 8:
    			return this.precpred(this._ctx, 17);
    		case 9:
    			return this.precpred(this._ctx, 16);
    		case 10:
    			return this.precpred(this._ctx, 15);
    		case 11:
    			return this.precpred(this._ctx, 14);
    		case 12:
    			return this.precpred(this._ctx, 13);
    		case 13:
    			return this.precpred(this._ctx, 11);
    		case 14:
    			return this.precpred(this._ctx, 10);
    		case 15:
    			return this.precpred(this._ctx, 9);
    		case 16:
    			return this.precpred(this._ctx, 8);
    		case 17:
    			return this.precpred(this._ctx, 7);
    		case 18:
    			return this.precpred(this._ctx, 25);
    		case 19:
    			return this.precpred(this._ctx, 12);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 20:
    			return this.lineTerminatorAhead();
    		case 21:
    			return this.closeBrace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SintesisParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 141;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 140;
	            this.statementList();

	        }
	        this.state = 143;
	        this.match(SintesisParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SintesisParser.RULE_statementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 146; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 145;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 148; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SintesisParser.RULE_statement);
	    try {
	        this.state = 164;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 150;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 151;
	            this.variableStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 152;
	            this.emptyStatement_();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 153;
	            this.stepStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 154;
	            this.printStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 155;
	            this.classDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 156;
	            this.ifStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 157;
	            this.iterationStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 158;
	            this.continueStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 159;
	            this.breakStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 160;
	            this.returnStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 161;
	            this.switchStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 162;
	            this.functionDeclaration();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 163;
	            this.expressionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SintesisParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 166;
	        this.match(SintesisParser.OpenBrace);
	        this.state = 168;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 167;
	            localctx.stmt = this.statementList();

	        }
	        this.state = 170;
	        this.match(SintesisParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stepStatement() {
	    let localctx = new StepStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SintesisParser.RULE_stepStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 172;
	        this.match(SintesisParser.Step);
	        this.state = 173;
	        localctx.exp = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===SintesisParser.DecimalLiteral || _la===SintesisParser.Identifier)) {
	            localctx.exp = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SintesisParser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 175;
	        this.match(SintesisParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printStatement() {
	    let localctx = new PrintStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SintesisParser.RULE_printStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 177;
	        this.match(SintesisParser.Print);
	        this.state = 178;
	        localctx.exp = this.expressionSequence();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SintesisParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 180;
	        if (!( this.notOpenBraceAndNotFunction())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
	        }
	        this.state = 181;
	        this.expressionSequence();
	        this.state = 182;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodCall() {
	    let localctx = new MethodCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SintesisParser.RULE_methodCall);
	    try {
	        this.state = 189;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 184;
	            this.identifier();
	            this.state = 185;
	            this.arguments();
	            break;
	        case SintesisParser.Super:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 187;
	            this.match(SintesisParser.Super);
	            this.state = 188;
	            this.arguments();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superSuffix() {
	    let localctx = new SuperSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SintesisParser.RULE_superSuffix);
	    var _la = 0; // Token type
	    try {
	        this.state = 197;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.OpenParen:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 191;
	            this.arguments();
	            break;
	        case SintesisParser.Dot:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 192;
	            this.match(SintesisParser.Dot);
	            this.state = 193;
	            this.identifier();
	            this.state = 195;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.OpenParen) {
	                this.state = 194;
	                this.arguments();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	member(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MemberContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 20;
	    this.enterRecursionRule(localctx, 20, SintesisParser.RULE_member, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 216;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.Attributes:
	            localctx = new ExpAttributesContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 200;
	            this.match(SintesisParser.Attributes);
	            break;
	        case SintesisParser.Methods:
	            localctx = new ExpMethodsContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 201;
	            this.match(SintesisParser.Methods);
	            break;
	        case SintesisParser.Super:
	            localctx = new ExpSuperContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 202;
	            this.match(SintesisParser.Super);
	            break;
	        case SintesisParser.New_:
	            localctx = new ExpNewContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 203;
	            this.match(SintesisParser.New_);
	            this.state = 205;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Instance) {
	                this.state = 204;
	                this.match(SintesisParser.Instance);
	            }

	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Of) {
	                this.state = 207;
	                this.match(SintesisParser.Of);
	                this.state = 209;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SintesisParser.Class_) {
	                    this.state = 208;
	                    this.match(SintesisParser.Class_);
	                }

	            }

	            this.state = 213;
	            localctx.id = this.match(SintesisParser.Identifier);
	            this.state = 214;
	            localctx.args = this.arguments();
	            break;
	        case SintesisParser.Identifier:
	            localctx = new ExpIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 215;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 241;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 239;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpMemberDotContext(this, new MemberContext(this, _parentctx, _parentState));
	                    localctx.mem = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_member);
	                    this.state = 218;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 219;
	                    this.match(SintesisParser.Dot);
	                    this.state = 220;
	                    localctx.idx = this.memberIdentifier();
	                    this.state = 221;
	                    localctx.args = this.arguments();
	                    break;

	                case 2:
	                    localctx = new ExpMemberDotContext(this, new MemberContext(this, _parentctx, _parentState));
	                    localctx.mem = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_member);
	                    this.state = 223;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 224;
	                    this.match(SintesisParser.Dot);
	                    this.state = 225;
	                    localctx.idx = this.memberIdentifier();
	                    break;

	                case 3:
	                    localctx = new ExpMemberIndexContext(this, new MemberContext(this, _parentctx, _parentState));
	                    localctx.mem = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_member);
	                    this.state = 226;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 227;
	                    this.match(SintesisParser.OpenBracket);
	                    this.state = 228;
	                    localctx.idx = this.singleExpression(0);
	                    this.state = 229;
	                    this.match(SintesisParser.CloseBracket);
	                    this.state = 230;
	                    localctx.args = this.arguments();
	                    break;

	                case 4:
	                    localctx = new ExpMemberIndexContext(this, new MemberContext(this, _parentctx, _parentState));
	                    localctx.mem = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_member);
	                    this.state = 232;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 233;
	                    this.match(SintesisParser.OpenBracket);
	                    this.state = 234;
	                    localctx.idx = this.singleExpression(0);
	                    this.state = 235;
	                    this.match(SintesisParser.CloseBracket);
	                    break;

	                case 5:
	                    localctx = new ExpMemberFuncContext(this, new MemberContext(this, _parentctx, _parentState));
	                    localctx.mem = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_member);
	                    this.state = 237;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 238;
	                    localctx.args = this.arguments();
	                    break;

	                } 
	            }
	            this.state = 243;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	memberIdentifier() {
	    let localctx = new MemberIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SintesisParser.RULE_memberIdentifier);
	    try {
	        this.state = 249;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.Attributes:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 244;
	            this.match(SintesisParser.Attributes);
	            break;
	        case SintesisParser.Methods:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 245;
	            this.match(SintesisParser.Methods);
	            break;
	        case SintesisParser.Super:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 246;
	            this.match(SintesisParser.Super);
	            break;
	        case SintesisParser.Constructor:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 247;
	            this.match(SintesisParser.Constructor);
	            break;
	        case SintesisParser.Identifier:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 248;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	singleExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 24;
	    this.enterRecursionRule(localctx, 24, SintesisParser.RULE_singleExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 286;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExpFunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 252;
	            this.anonymousFunction();
	            break;

	        case 2:
	            localctx = new ExpBasicFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 253;
	            localctx.fn = this.basicFunction();
	            this.state = 254;
	            localctx.args = this.arguments();
	            break;

	        case 3:
	            localctx = new ExpJavascriptContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 256;
	            this.match(SintesisParser.JavascriptCode);
	            break;

	        case 4:
	            localctx = new ExpMathContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 257;
	            this.match(SintesisParser.Math);
	            this.state = 258;
	            this.match(SintesisParser.Dot);
	            this.state = 259;
	            localctx.fn = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (SintesisParser.Min - 100)) | (1 << (SintesisParser.Max - 100)) | (1 << (SintesisParser.Random - 100)) | (1 << (SintesisParser.Identifier - 100)))) !== 0))) {
	                localctx.fn = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 260;
	            localctx.args = this.arguments();
	            break;

	        case 5:
	            localctx = new ExpPreIncrementContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 261;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SintesisParser.PlusPlus || _la===SintesisParser.MinusMinus)) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 262;
	            localctx.dest = this.singleExpression(24);
	            break;

	        case 6:
	            localctx = new ExpUnaryPlusContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 263;
	            this.match(SintesisParser.Plus);
	            this.state = 264;
	            localctx.exp = this.singleExpression(23);
	            break;

	        case 7:
	            localctx = new ExpUnaryMinusContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 265;
	            this.match(SintesisParser.Minus);
	            this.state = 266;
	            localctx.exp = this.singleExpression(22);
	            break;

	        case 8:
	            localctx = new ExpBitNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 267;
	            localctx.op = this.match(SintesisParser.BitNot);
	            this.state = 268;
	            localctx.exp = this.singleExpression(21);
	            break;

	        case 9:
	            localctx = new ExpNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 269;
	            localctx.op = this.match(SintesisParser.Not);
	            this.state = 270;
	            localctx.exp = this.singleExpression(20);
	            break;

	        case 10:
	            localctx = new ExpAssignmentContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 271;
	            localctx.dest = this.member(0);
	            this.state = 272;
	            this.match(SintesisParser.Assign);
	            this.state = 273;
	            localctx.exp = this.singleExpression(6);
	            break;

	        case 11:
	            localctx = new ExpAssignmentOperatorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 275;
	            localctx.dest = this.member(0);
	            this.state = 276;
	            localctx.op = this.assignmentOperator();
	            this.state = 277;
	            localctx.exp = this.singleExpression(5);
	            break;

	        case 12:
	            localctx = new ExpVarContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 279;
	            this.variableDeclarationList();
	            break;

	        case 13:
	            localctx = new ExpParenthesisContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 280;
	            this.match(SintesisParser.OpenParen);
	            this.state = 281;
	            localctx.exp = this.singleExpression(0);
	            this.state = 282;
	            this.match(SintesisParser.CloseParen);
	            break;

	        case 14:
	            localctx = new ExpMemberContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 284;
	            this.member(0);
	            break;

	        case 15:
	            localctx = new ExpLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 285;
	            this.literal();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 334;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 332;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 288;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 289;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SintesisParser.Multiply) | (1 << SintesisParser.Divide) | (1 << SintesisParser.Modulus))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 290;
	                    localctx.e2 = this.singleExpression(20);
	                    break;

	                case 2:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 291;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 292;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SintesisParser.Plus || _la===SintesisParser.Minus)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 293;
	                    localctx.e2 = this.singleExpression(19);
	                    break;

	                case 3:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 294;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 295;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SintesisParser.RightShiftArithmetic) | (1 << SintesisParser.LeftShiftArithmetic) | (1 << SintesisParser.RightShiftLogical))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 296;
	                    localctx.e2 = this.singleExpression(18);
	                    break;

	                case 4:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 297;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 298;
	                    localctx.op = this.match(SintesisParser.Power);
	                    this.state = 299;
	                    localctx.e2 = this.singleExpression(16);
	                    break;

	                case 5:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 300;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 301;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SintesisParser.LessThan || _la===SintesisParser.MoreThan)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 302;
	                    localctx.e2 = this.singleExpression(16);
	                    break;

	                case 6:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 303;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 304;
	                    localctx.op = this.match(SintesisParser.LessThanEquals);
	                    this.state = 305;
	                    localctx.e2 = this.singleExpression(15);
	                    break;

	                case 7:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 306;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 307;
	                    localctx.op = this.match(SintesisParser.GreaterThanEquals);
	                    this.state = 308;
	                    localctx.e2 = this.singleExpression(14);
	                    break;

	                case 8:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 309;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 310;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SintesisParser.IdentityEquals || _la===SintesisParser.IdentityNotEquals)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 311;
	                    localctx.e2 = this.singleExpression(12);
	                    break;

	                case 9:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 312;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 313;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SintesisParser.Equals_ || _la===SintesisParser.NotEquals)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 314;
	                    localctx.e2 = this.singleExpression(11);
	                    break;

	                case 10:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 315;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 316;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SintesisParser.BitAnd - 40)) | (1 << (SintesisParser.BitXOr - 40)) | (1 << (SintesisParser.BitOr - 40)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 317;
	                    localctx.e2 = this.singleExpression(10);
	                    break;

	                case 11:
	                    localctx = new ExpOpContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 318;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 319;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SintesisParser.And || _la===SintesisParser.Or)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 320;
	                    localctx.e2 = this.singleExpression(9);
	                    break;

	                case 12:
	                    localctx = new ExpTernaryContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.cond = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 321;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 322;
	                    this.match(SintesisParser.QuestionMark);
	                    this.state = 323;
	                    localctx.ok = this.singleExpression(0);
	                    this.state = 324;
	                    this.match(SintesisParser.Colon);
	                    this.state = 325;
	                    localctx.no = this.singleExpression(8);
	                    break;

	                case 13:
	                    localctx = new ExpPostIncrementContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.dest = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 327;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 328;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SintesisParser.PlusPlus || _la===SintesisParser.MinusMinus)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 14:
	                    localctx = new ExpInstanceOfContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    localctx.e1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SintesisParser.RULE_singleExpression);
	                    this.state = 329;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 330;
	                    this.match(SintesisParser.InstanceOf);
	                    this.state = 331;
	                    localctx.e2 = this.identifier();
	                    break;

	                } 
	            }
	            this.state = 336;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	basicFunction0() {
	    let localctx = new BasicFunction0Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SintesisParser.RULE_basicFunction0);
	    try {
	        localctx = new RandomContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this.match(SintesisParser.Random);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicFunction1() {
	    let localctx = new BasicFunction1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SintesisParser.RULE_basicFunction1);
	    try {
	        this.state = 348;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.NumberOf:
	            localctx = new NumberOfContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 339;
	            this.match(SintesisParser.NumberOf);
	            break;
	        case SintesisParser.Lower:
	            localctx = new LowerContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 340;
	            this.match(SintesisParser.Lower);
	            break;
	        case SintesisParser.Upper:
	            localctx = new UpperContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 341;
	            this.match(SintesisParser.Upper);
	            break;
	        case SintesisParser.Max:
	            localctx = new MaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 342;
	            this.match(SintesisParser.Max);
	            break;
	        case SintesisParser.Min:
	            localctx = new MinContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 343;
	            this.match(SintesisParser.Min);
	            break;
	        case SintesisParser.Ord:
	            localctx = new OrdContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 344;
	            this.match(SintesisParser.Ord);
	            break;
	        case SintesisParser.Chr:
	            localctx = new ChrContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 345;
	            this.match(SintesisParser.Chr);
	            break;
	        case SintesisParser.Prompt:
	            localctx = new PromptContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 346;
	            this.match(SintesisParser.Prompt);
	            break;
	        case SintesisParser.Dictionary:
	            localctx = new DictionaryContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 347;
	            this.match(SintesisParser.Dictionary);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicFunction2() {
	    let localctx = new BasicFunction2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SintesisParser.RULE_basicFunction2);
	    try {
	        this.state = 352;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.IndexOf:
	            localctx = new IndexOfContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 350;
	            this.match(SintesisParser.IndexOf);
	            break;
	        case SintesisParser.Convert:
	            localctx = new ConvertContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 351;
	            this.match(SintesisParser.Convert);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicFunction3() {
	    let localctx = new BasicFunction3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SintesisParser.RULE_basicFunction3);
	    try {
	        localctx = new SubContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        this.match(SintesisParser.Sub);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicFunction() {
	    let localctx = new BasicFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SintesisParser.RULE_basicFunction);
	    try {
	        this.state = 360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.Random:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 356;
	            this.basicFunction0();
	            break;
	        case SintesisParser.NumberOf:
	        case SintesisParser.Lower:
	        case SintesisParser.Upper:
	        case SintesisParser.Min:
	        case SintesisParser.Max:
	        case SintesisParser.Chr:
	        case SintesisParser.Ord:
	        case SintesisParser.Prompt:
	        case SintesisParser.Dictionary:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 357;
	            this.basicFunction1();
	            break;
	        case SintesisParser.IndexOf:
	        case SintesisParser.Convert:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 358;
	            this.basicFunction2();
	            break;
	        case SintesisParser.Sub:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 359;
	            this.basicFunction3();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSequence() {
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SintesisParser.RULE_expressionSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.singleExpression(0);
	        this.state = 367;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 363;
	                this.match(SintesisParser.Comma);
	                this.state = 364;
	                this.singleExpression(0); 
	            }
	            this.state = 369;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SintesisParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 370;
	        this.match(SintesisParser.If);
	        this.state = 371;
	        localctx.exp = this.singleExpression(0);
	        this.state = 373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 372;
	            this.match(SintesisParser.Then);

	        }
	        this.state = 375;
	        localctx.stmt = this.statement();
	        this.state = 377;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 376;
	            localctx.elseifs = this.elseIfs();

	        }
	        this.state = 384;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 379;
	            this.match(SintesisParser.Else);
	            this.state = 381;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 380;
	                this.match(SintesisParser.Then);

	            }
	            this.state = 383;
	            localctx.elsestmt_ = this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseIfs() {
	    let localctx = new ElseIfsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SintesisParser.RULE_elseIfs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 386;
	        		this.elseIf();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 389; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,25, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseIf() {
	    let localctx = new ElseIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SintesisParser.RULE_elseIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.match(SintesisParser.ElseIf);
	        this.state = 392;
	        localctx.exp = this.singleExpression(0);
	        this.state = 394;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        if(la_===1) {
	            this.state = 393;
	            this.match(SintesisParser.Then);

	        }
	        this.state = 396;
	        localctx.stmt = this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteratorIndexes() {
	    let localctx = new IteratorIndexesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SintesisParser.RULE_iteratorIndexes);
	    var _la = 0; // Token type
	    try {
	        this.state = 411;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 398;
	            localctx.idv = this.match(SintesisParser.Identifier);
	            this.state = 399;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SintesisParser.In || _la===SintesisParser.Of)) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 400;
	            localctx.coll = this.singleExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 401;
	            localctx.idv = this.match(SintesisParser.Identifier);
	            this.state = 402;
	            this.match(SintesisParser.Comma);
	            this.state = 403;
	            localctx.idk = this.match(SintesisParser.Identifier);
	            this.state = 404;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SintesisParser.In || _la===SintesisParser.Of)) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 405;
	            localctx.coll = this.singleExpression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 406;
	            localctx.idk = this.match(SintesisParser.Identifier);
	            this.state = 407;
	            this.match(SintesisParser.ARROW);
	            this.state = 408;
	            localctx.idv = this.match(SintesisParser.Identifier);
	            this.state = 409;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SintesisParser.In || _la===SintesisParser.Of)) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 410;
	            localctx.coll = this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteratorRange() {
	    let localctx = new IteratorRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SintesisParser.RULE_iteratorRange);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Var_) {
	            this.state = 413;
	            localctx.vvar = this.match(SintesisParser.Var_);
	        }

	        this.state = 416;
	        localctx.id = this.identifier();
	        this.state = 417;
	        _la = this._input.LA(1);
	        if(!(_la===SintesisParser.Assign || _la===SintesisParser.In)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 418;
	        localctx.start = this.singleExpression(0);
	        this.state = 419;
	        this.match(SintesisParser.To);
	        this.state = 420;
	        localctx.to = this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SintesisParser.RULE_iterationStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 503;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new RepeatStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 422;
	            this.match(SintesisParser.Repeat);
	            this.state = 423;
	            localctx.exp = this.singleExpression(0);
	            this.state = 425;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 424;
	                this.match(SintesisParser.Times);

	            }
	            this.state = 427;
	            localctx.stmt = this.statement();
	            break;

	        case 2:
	            localctx = new RepeatWhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 429;
	            _la = this._input.LA(1);
	            if(!(_la===SintesisParser.Repeat || _la===SintesisParser.Do)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 430;
	            localctx.stmt = this.statement();
	            this.state = 431;
	            this.match(SintesisParser.While);
	            this.state = 432;
	            localctx.exp = this.singleExpression(0);
	            break;

	        case 3:
	            localctx = new WhileRepeatStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 435;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Repeat) {
	                this.state = 434;
	                this.match(SintesisParser.Repeat);
	            }

	            this.state = 437;
	            this.match(SintesisParser.While);
	            this.state = 438;
	            localctx.exp = this.singleExpression(0);
	            this.state = 440;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	            if(la_===1) {
	                this.state = 439;
	                _la = this._input.LA(1);
	                if(!(_la===SintesisParser.Repeat || _la===SintesisParser.Do)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 442;
	            localctx.stmt = this.statement();
	            break;

	        case 4:
	            localctx = new ForClassicContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 444;
	            this.match(SintesisParser.For);
	            this.state = 445;
	            this.match(SintesisParser.OpenParen);
	            this.state = 447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SintesisParser.JavascriptCode) | (1 << SintesisParser.OpenBracket) | (1 << SintesisParser.OpenParen) | (1 << SintesisParser.OpenBrace) | (1 << SintesisParser.PlusPlus) | (1 << SintesisParser.MinusMinus) | (1 << SintesisParser.Plus) | (1 << SintesisParser.Minus) | (1 << SintesisParser.BitNot) | (1 << SintesisParser.Not))) !== 0) || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SintesisParser.NullLiteral - 58)) | (1 << (SintesisParser.DecimalLiteral - 58)) | (1 << (SintesisParser.HexIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral2 - 58)) | (1 << (SintesisParser.BinaryIntegerLiteral - 58)) | (1 << (SintesisParser.BooleanLiteral - 58)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (SintesisParser.Declare - 91)) | (1 << (SintesisParser.Function_ - 91)) | (1 << (SintesisParser.NumberOf - 91)) | (1 << (SintesisParser.IndexOf - 91)) | (1 << (SintesisParser.Sub - 91)) | (1 << (SintesisParser.Lower - 91)) | (1 << (SintesisParser.Upper - 91)) | (1 << (SintesisParser.Math - 91)) | (1 << (SintesisParser.Min - 91)) | (1 << (SintesisParser.Max - 91)) | (1 << (SintesisParser.Random - 91)) | (1 << (SintesisParser.Chr - 91)) | (1 << (SintesisParser.Ord - 91)) | (1 << (SintesisParser.Prompt - 91)) | (1 << (SintesisParser.Convert - 91)) | (1 << (SintesisParser.New_ - 91)) | (1 << (SintesisParser.Attributes - 91)) | (1 << (SintesisParser.Methods - 91)) | (1 << (SintesisParser.Super - 91)) | (1 << (SintesisParser.Dictionary - 91)) | (1 << (SintesisParser.Var_ - 91)) | (1 << (SintesisParser.Const_ - 91)))) !== 0) || _la===SintesisParser.Identifier || _la===SintesisParser.StringLiteral) {
	                this.state = 446;
	                localctx.pre = this.forPre();
	            }

	            this.state = 449;
	            this.match(SintesisParser.SemiColon);
	            this.state = 451;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SintesisParser.JavascriptCode) | (1 << SintesisParser.OpenBracket) | (1 << SintesisParser.OpenParen) | (1 << SintesisParser.OpenBrace) | (1 << SintesisParser.PlusPlus) | (1 << SintesisParser.MinusMinus) | (1 << SintesisParser.Plus) | (1 << SintesisParser.Minus) | (1 << SintesisParser.BitNot) | (1 << SintesisParser.Not))) !== 0) || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SintesisParser.NullLiteral - 58)) | (1 << (SintesisParser.DecimalLiteral - 58)) | (1 << (SintesisParser.HexIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral2 - 58)) | (1 << (SintesisParser.BinaryIntegerLiteral - 58)) | (1 << (SintesisParser.BooleanLiteral - 58)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (SintesisParser.Declare - 91)) | (1 << (SintesisParser.Function_ - 91)) | (1 << (SintesisParser.NumberOf - 91)) | (1 << (SintesisParser.IndexOf - 91)) | (1 << (SintesisParser.Sub - 91)) | (1 << (SintesisParser.Lower - 91)) | (1 << (SintesisParser.Upper - 91)) | (1 << (SintesisParser.Math - 91)) | (1 << (SintesisParser.Min - 91)) | (1 << (SintesisParser.Max - 91)) | (1 << (SintesisParser.Random - 91)) | (1 << (SintesisParser.Chr - 91)) | (1 << (SintesisParser.Ord - 91)) | (1 << (SintesisParser.Prompt - 91)) | (1 << (SintesisParser.Convert - 91)) | (1 << (SintesisParser.New_ - 91)) | (1 << (SintesisParser.Attributes - 91)) | (1 << (SintesisParser.Methods - 91)) | (1 << (SintesisParser.Super - 91)) | (1 << (SintesisParser.Dictionary - 91)) | (1 << (SintesisParser.Var_ - 91)) | (1 << (SintesisParser.Const_ - 91)))) !== 0) || _la===SintesisParser.Identifier || _la===SintesisParser.StringLiteral) {
	                this.state = 450;
	                localctx.exp = this.expressionSequence();
	            }

	            this.state = 453;
	            this.match(SintesisParser.SemiColon);
	            this.state = 455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SintesisParser.JavascriptCode) | (1 << SintesisParser.OpenBracket) | (1 << SintesisParser.OpenParen) | (1 << SintesisParser.OpenBrace) | (1 << SintesisParser.PlusPlus) | (1 << SintesisParser.MinusMinus) | (1 << SintesisParser.Plus) | (1 << SintesisParser.Minus) | (1 << SintesisParser.BitNot) | (1 << SintesisParser.Not))) !== 0) || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SintesisParser.NullLiteral - 58)) | (1 << (SintesisParser.DecimalLiteral - 58)) | (1 << (SintesisParser.HexIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral2 - 58)) | (1 << (SintesisParser.BinaryIntegerLiteral - 58)) | (1 << (SintesisParser.BooleanLiteral - 58)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (SintesisParser.Declare - 91)) | (1 << (SintesisParser.Function_ - 91)) | (1 << (SintesisParser.NumberOf - 91)) | (1 << (SintesisParser.IndexOf - 91)) | (1 << (SintesisParser.Sub - 91)) | (1 << (SintesisParser.Lower - 91)) | (1 << (SintesisParser.Upper - 91)) | (1 << (SintesisParser.Math - 91)) | (1 << (SintesisParser.Min - 91)) | (1 << (SintesisParser.Max - 91)) | (1 << (SintesisParser.Random - 91)) | (1 << (SintesisParser.Chr - 91)) | (1 << (SintesisParser.Ord - 91)) | (1 << (SintesisParser.Prompt - 91)) | (1 << (SintesisParser.Convert - 91)) | (1 << (SintesisParser.New_ - 91)) | (1 << (SintesisParser.Attributes - 91)) | (1 << (SintesisParser.Methods - 91)) | (1 << (SintesisParser.Super - 91)) | (1 << (SintesisParser.Dictionary - 91)) | (1 << (SintesisParser.Var_ - 91)) | (1 << (SintesisParser.Const_ - 91)))) !== 0) || _la===SintesisParser.Identifier || _la===SintesisParser.StringLiteral) {
	                this.state = 454;
	                localctx.post = this.expressionSequence();
	            }

	            this.state = 457;
	            this.match(SintesisParser.CloseParen);
	            this.state = 458;
	            localctx.stmt = this.statement();
	            break;

	        case 5:
	            localctx = new ForFromToStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 459;
	            this.match(SintesisParser.For);
	            this.state = 460;
	            localctx.iter = this.iteratorRange();
	            this.state = 462;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	            if(la_===1) {
	                this.state = 461;
	                _la = this._input.LA(1);
	                if(!(_la===SintesisParser.Repeat || _la===SintesisParser.Do)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 464;
	            localctx.stmt = this.statement();
	            break;

	        case 6:
	            localctx = new ForFromToStatement2Context(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 466;
	            this.match(SintesisParser.For);
	            this.state = 467;
	            this.match(SintesisParser.OpenParen);
	            this.state = 468;
	            localctx.iter = this.iteratorRange();
	            this.state = 469;
	            this.match(SintesisParser.CloseParen);
	            this.state = 471;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	            if(la_===1) {
	                this.state = 470;
	                _la = this._input.LA(1);
	                if(!(_la===SintesisParser.Repeat || _la===SintesisParser.Do)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 473;
	            localctx.stmt = this.statement();
	            break;

	        case 7:
	            localctx = new ForEachStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 480;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SintesisParser.For:
	                this.state = 475;
	                this.match(SintesisParser.For);
	                this.state = 477;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SintesisParser.Each) {
	                    this.state = 476;
	                    this.match(SintesisParser.Each);
	                }

	                break;
	            case SintesisParser.ForEach:
	                this.state = 479;
	                this.match(SintesisParser.ForEach);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 482;
	            localctx.iter = this.iteratorIndexes();
	            this.state = 484;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	            if(la_===1) {
	                this.state = 483;
	                _la = this._input.LA(1);
	                if(!(_la===SintesisParser.Repeat || _la===SintesisParser.Do)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 486;
	            localctx.stmt = this.statement();
	            break;

	        case 8:
	            localctx = new ForEachStatement2Context(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 493;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SintesisParser.For:
	                this.state = 488;
	                this.match(SintesisParser.For);
	                this.state = 490;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SintesisParser.Each) {
	                    this.state = 489;
	                    this.match(SintesisParser.Each);
	                }

	                break;
	            case SintesisParser.ForEach:
	                this.state = 492;
	                this.match(SintesisParser.ForEach);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 495;
	            this.match(SintesisParser.OpenParen);
	            this.state = 496;
	            localctx.iter = this.iteratorIndexes();
	            this.state = 497;
	            this.match(SintesisParser.CloseParen);
	            this.state = 499;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	            if(la_===1) {
	                this.state = 498;
	                _la = this._input.LA(1);
	                if(!(_la===SintesisParser.Repeat || _la===SintesisParser.Do)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 501;
	            localctx.stmt = this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forPre() {
	    let localctx = new ForPreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SintesisParser.RULE_forPre);
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 505;
	            this.expressionSequence();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 506;
	            this.variableDeclarationList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SintesisParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this.match(SintesisParser.Continue);
	        this.state = 510;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SintesisParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(SintesisParser.Break);
	        this.state = 513;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SintesisParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        this.match(SintesisParser.Return);
	        this.state = 518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 516;
	            localctx.exp = this.singleExpression(0);
	            break;

	        case 2:
	            this.state = 517;
	            this.eos();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SintesisParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this.match(SintesisParser.Switch);
	        this.state = 521;
	        this.match(SintesisParser.OpenParen);
	        this.state = 522;
	        this.expressionSequence();
	        this.state = 523;
	        this.match(SintesisParser.CloseParen);
	        this.state = 524;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SintesisParser.RULE_caseBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        this.match(SintesisParser.OpenBrace);
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Case) {
	            this.state = 527;
	            this.caseClauses();
	        }

	        this.state = 534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Default) {
	            this.state = 530;
	            this.defaultClause();
	            this.state = 532;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Case) {
	                this.state = 531;
	                this.caseClauses();
	            }

	        }

	        this.state = 536;
	        this.match(SintesisParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SintesisParser.RULE_caseClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 538;
	            this.caseClause();
	            this.state = 541; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SintesisParser.Case);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SintesisParser.RULE_caseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.match(SintesisParser.Case);
	        this.state = 544;
	        this.expressionSequence();
	        this.state = 545;
	        this.match(SintesisParser.Colon);
	        this.state = 547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        if(la_===1) {
	            this.state = 546;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SintesisParser.RULE_defaultClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 549;
	        this.match(SintesisParser.Default);
	        this.state = 550;
	        this.match(SintesisParser.Colon);
	        this.state = 552;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        if(la_===1) {
	            this.state = 551;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SintesisParser.RULE_formalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.formalParameterArg();
	        this.state = 559;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SintesisParser.Comma) {
	            this.state = 555;
	            this.match(SintesisParser.Comma);
	            this.state = 556;
	            this.formalParameterArg();
	            this.state = 561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SintesisParser.RULE_functionDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Declare) {
	            this.state = 562;
	            localctx.dec = this.match(SintesisParser.Declare);
	        }

	        this.state = 565;
	        localctx.fun = this.match(SintesisParser.Function_);
	        this.state = 566;
	        localctx.id = this.identifier();
	        this.state = 567;
	        this.match(SintesisParser.OpenParen);
	        this.state = 569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Identifier) {
	            this.state = 568;
	            localctx.pl = this.formalParameterList();
	        }

	        this.state = 571;
	        this.match(SintesisParser.CloseParen);
	        this.state = 572;
	        localctx.stmt = this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclarationExpr() {
	    let localctx = new FunctionDeclarationExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SintesisParser.RULE_functionDeclarationExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        localctx.fun = this.match(SintesisParser.Function_);
	        this.state = 575;
	        localctx.id = this.identifier();
	        this.state = 576;
	        this.match(SintesisParser.OpenParen);
	        this.state = 578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Identifier) {
	            this.state = 577;
	            localctx.pl = this.formalParameterList();
	        }

	        this.state = 580;
	        this.match(SintesisParser.CloseParen);
	        this.state = 581;
	        localctx.stmt = this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SintesisParser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this.match(SintesisParser.OpenParen);
	        this.state = 592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SintesisParser.JavascriptCode) | (1 << SintesisParser.OpenBracket) | (1 << SintesisParser.OpenParen) | (1 << SintesisParser.OpenBrace) | (1 << SintesisParser.PlusPlus) | (1 << SintesisParser.MinusMinus) | (1 << SintesisParser.Plus) | (1 << SintesisParser.Minus) | (1 << SintesisParser.BitNot) | (1 << SintesisParser.Not))) !== 0) || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SintesisParser.NullLiteral - 58)) | (1 << (SintesisParser.DecimalLiteral - 58)) | (1 << (SintesisParser.HexIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral2 - 58)) | (1 << (SintesisParser.BinaryIntegerLiteral - 58)) | (1 << (SintesisParser.BooleanLiteral - 58)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (SintesisParser.Declare - 91)) | (1 << (SintesisParser.Function_ - 91)) | (1 << (SintesisParser.NumberOf - 91)) | (1 << (SintesisParser.IndexOf - 91)) | (1 << (SintesisParser.Sub - 91)) | (1 << (SintesisParser.Lower - 91)) | (1 << (SintesisParser.Upper - 91)) | (1 << (SintesisParser.Math - 91)) | (1 << (SintesisParser.Min - 91)) | (1 << (SintesisParser.Max - 91)) | (1 << (SintesisParser.Random - 91)) | (1 << (SintesisParser.Chr - 91)) | (1 << (SintesisParser.Ord - 91)) | (1 << (SintesisParser.Prompt - 91)) | (1 << (SintesisParser.Convert - 91)) | (1 << (SintesisParser.New_ - 91)) | (1 << (SintesisParser.Attributes - 91)) | (1 << (SintesisParser.Methods - 91)) | (1 << (SintesisParser.Super - 91)) | (1 << (SintesisParser.Dictionary - 91)) | (1 << (SintesisParser.Var_ - 91)) | (1 << (SintesisParser.Const_ - 91)))) !== 0) || _la===SintesisParser.Identifier || _la===SintesisParser.StringLiteral) {
	            this.state = 584;
	            this.singleExpression(0);
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SintesisParser.Comma) {
	                this.state = 585;
	                this.match(SintesisParser.Comma);
	                this.state = 586;
	                this.singleExpression(0);
	                this.state = 591;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 594;
	        this.match(SintesisParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	visibility() {
	    let localctx = new VisibilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SintesisParser.RULE_visibility);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        _la = this._input.LA(1);
	        if(!(((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (SintesisParser.Private - 123)) | (1 << (SintesisParser.Public - 123)) | (1 << (SintesisParser.Protected - 123)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SintesisParser.RULE_classDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Declare) {
	            this.state = 598;
	            localctx.dec = this.match(SintesisParser.Declare);
	        }

	        this.state = 601;
	        localctx.clas = this.match(SintesisParser.Class_);
	        this.state = 602;
	        localctx.id = this.identifier();
	        this.state = 605;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Extends) {
	            this.state = 603;
	            this.match(SintesisParser.Extends);
	            this.state = 604;
	            localctx.ext = this.identifier();
	        }

	        this.state = 607;
	        this.match(SintesisParser.OpenBrace);
	        this.state = 619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        if(la_===1) {
	            this.state = 610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Attributes) {
	                this.state = 608;
	                this.match(SintesisParser.Attributes);
	                this.state = 609;
	                this.match(SintesisParser.Colon);
	            }

	            this.state = 617;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SintesisParser.OpenBrace:
	                this.state = 612;
	                this.match(SintesisParser.OpenBrace);
	                this.state = 613;
	                localctx.atrs = this.attributesList();
	                this.state = 614;
	                this.match(SintesisParser.CloseBrace);
	                break;
	            case SintesisParser.Private:
	            case SintesisParser.Public:
	            case SintesisParser.Protected:
	            case SintesisParser.Identifier:
	                this.state = 616;
	                localctx.atrs = this.attributesList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	        this.state = 621;
	        this.eos();
	        this.state = 633;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.OpenBrace || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (SintesisParser.Function_ - 92)) | (1 << (SintesisParser.Methods - 92)) | (1 << (SintesisParser.Method - 92)) | (1 << (SintesisParser.Constructor - 92)) | (1 << (SintesisParser.Private - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (SintesisParser.Public - 124)) | (1 << (SintesisParser.Protected - 124)) | (1 << (SintesisParser.Identifier - 124)))) !== 0)) {
	            this.state = 624;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Methods) {
	                this.state = 622;
	                localctx.mdec = this.match(SintesisParser.Methods);
	                this.state = 623;
	                this.match(SintesisParser.Colon);
	            }

	            this.state = 631;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SintesisParser.Function_:
	            case SintesisParser.Method:
	            case SintesisParser.Constructor:
	            case SintesisParser.Private:
	            case SintesisParser.Public:
	            case SintesisParser.Protected:
	            case SintesisParser.Identifier:
	                this.state = 626;
	                localctx.methods = this.methodsList();
	                break;
	            case SintesisParser.OpenBrace:
	                this.state = 627;
	                this.match(SintesisParser.OpenBrace);
	                this.state = 628;
	                localctx.methods = this.methodsList();
	                this.state = 629;
	                this.match(SintesisParser.CloseBrace);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 635;
	        this.match(SintesisParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributesList() {
	    let localctx = new AttributesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SintesisParser.RULE_attributesList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 637;
	        		this.classAttributeDecl();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 640; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,66, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classAttributeDecl() {
	    let localctx = new ClassAttributeDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SintesisParser.RULE_classAttributeDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (SintesisParser.Private - 123)) | (1 << (SintesisParser.Public - 123)) | (1 << (SintesisParser.Protected - 123)))) !== 0)) {
	            this.state = 642;
	            localctx.vis = this.visibility();
	        }

	        this.state = 645;
	        this.variableDeclaration();
	        this.state = 650;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 646;
	                this.match(SintesisParser.Comma);
	                this.state = 647;
	                this.variableDeclaration(); 
	            }
	            this.state = 652;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SintesisParser.RULE_methodDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (SintesisParser.Private - 123)) | (1 << (SintesisParser.Public - 123)) | (1 << (SintesisParser.Protected - 123)))) !== 0)) {
	            this.state = 653;
	            localctx.vis = this.visibility();
	        }

	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Function_ || _la===SintesisParser.Method) {
	            this.state = 656;
	            localctx.mname = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SintesisParser.Function_ || _la===SintesisParser.Method)) {
	                localctx.mname = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 659;
	        localctx.id = this.methodName();
	        this.state = 660;
	        this.match(SintesisParser.OpenParen);
	        this.state = 662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Identifier) {
	            this.state = 661;
	            localctx.pl = this.formalParameterList();
	        }

	        this.state = 664;
	        this.match(SintesisParser.CloseParen);
	        this.state = 665;
	        localctx.stmt = this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodName() {
	    let localctx = new MethodNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SintesisParser.RULE_methodName);
	    try {
	        this.state = 669;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 667;
	            this.identifier();
	            break;
	        case SintesisParser.Constructor:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 668;
	            this.match(SintesisParser.Constructor);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodsList() {
	    let localctx = new MethodsListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SintesisParser.RULE_methodsList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 671;
	            this.methodDeclaration();
	            this.state = 674; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (SintesisParser.Function_ - 92)) | (1 << (SintesisParser.Method - 92)) | (1 << (SintesisParser.Constructor - 92)) | (1 << (SintesisParser.Private - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (SintesisParser.Public - 124)) | (1 << (SintesisParser.Protected - 124)) | (1 << (SintesisParser.Identifier - 124)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classExp() {
	    let localctx = new ClassExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SintesisParser.RULE_classExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        this.match(SintesisParser.New_);
	        this.state = 678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Instance) {
	            this.state = 677;
	            this.match(SintesisParser.Instance);
	        }

	        this.state = 684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Of) {
	            this.state = 680;
	            this.match(SintesisParser.Of);
	            this.state = 682;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Class_) {
	                this.state = 681;
	                this.match(SintesisParser.Class_);
	            }

	        }

	        this.state = 686;
	        this.match(SintesisParser.Identifier);
	        this.state = 687;
	        localctx.args = this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listIndex() {
	    let localctx = new ListIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SintesisParser.RULE_listIndex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 689;
	        this.match(SintesisParser.OpenBracket);
	        this.state = 691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SintesisParser.JavascriptCode) | (1 << SintesisParser.OpenBracket) | (1 << SintesisParser.OpenParen) | (1 << SintesisParser.OpenBrace) | (1 << SintesisParser.PlusPlus) | (1 << SintesisParser.MinusMinus) | (1 << SintesisParser.Plus) | (1 << SintesisParser.Minus) | (1 << SintesisParser.BitNot) | (1 << SintesisParser.Not))) !== 0) || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SintesisParser.NullLiteral - 58)) | (1 << (SintesisParser.DecimalLiteral - 58)) | (1 << (SintesisParser.HexIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral2 - 58)) | (1 << (SintesisParser.BinaryIntegerLiteral - 58)) | (1 << (SintesisParser.BooleanLiteral - 58)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (SintesisParser.Declare - 91)) | (1 << (SintesisParser.Function_ - 91)) | (1 << (SintesisParser.NumberOf - 91)) | (1 << (SintesisParser.IndexOf - 91)) | (1 << (SintesisParser.Sub - 91)) | (1 << (SintesisParser.Lower - 91)) | (1 << (SintesisParser.Upper - 91)) | (1 << (SintesisParser.Math - 91)) | (1 << (SintesisParser.Min - 91)) | (1 << (SintesisParser.Max - 91)) | (1 << (SintesisParser.Random - 91)) | (1 << (SintesisParser.Chr - 91)) | (1 << (SintesisParser.Ord - 91)) | (1 << (SintesisParser.Prompt - 91)) | (1 << (SintesisParser.Convert - 91)) | (1 << (SintesisParser.New_ - 91)) | (1 << (SintesisParser.Attributes - 91)) | (1 << (SintesisParser.Methods - 91)) | (1 << (SintesisParser.Super - 91)) | (1 << (SintesisParser.Dictionary - 91)) | (1 << (SintesisParser.Var_ - 91)) | (1 << (SintesisParser.Const_ - 91)))) !== 0) || _la===SintesisParser.Identifier || _la===SintesisParser.StringLiteral) {
	            this.state = 690;
	            this.singleExpression(0);
	        }

	        this.state = 693;
	        this.match(SintesisParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listIndexes() {
	    let localctx = new ListIndexesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SintesisParser.RULE_listIndexes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 695;
	            this.listIndex();
	            this.state = 698; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SintesisParser.OpenBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterArg() {
	    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SintesisParser.RULE_formalParameterArg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        localctx.dest = this.identifier();
	        this.state = 703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Assign) {
	            this.state = 701;
	            this.match(SintesisParser.Assign);
	            this.state = 702;
	            localctx.exp = this.singleExpression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableStatement() {
	    let localctx = new VariableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SintesisParser.RULE_variableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.variableDeclarationList();
	        this.state = 706;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SintesisParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 708;
	        localctx.dest = this.identifier();
	        this.state = 711;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        if(la_===1) {
	            this.state = 709;
	            this.match(SintesisParser.Assign);
	            this.state = 710;
	            localctx.exp = this.singleExpression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SintesisParser.RULE_variableDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.varModifier();
	        this.state = 714;
	        this.variableDeclaration();
	        this.state = 719;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 715;
	                this.match(SintesisParser.Comma);
	                this.state = 716;
	                this.variableDeclaration(); 
	            }
	            this.state = 721;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varModifier() {
	    let localctx = new VarModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SintesisParser.RULE_varModifier);
	    try {
	        this.state = 729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 722;
	            this.match(SintesisParser.Declare);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 723;
	            this.match(SintesisParser.Declare);
	            this.state = 724;
	            this.match(SintesisParser.Var_);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 725;
	            this.match(SintesisParser.Declare);
	            this.state = 726;
	            this.match(SintesisParser.Const_);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 727;
	            this.match(SintesisParser.Var_);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 728;
	            this.match(SintesisParser.Const_);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SintesisParser.RULE_functionBody);
	    try {
	        this.state = 733;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 731;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 732;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymousFunction() {
	    let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SintesisParser.RULE_anonymousFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 746;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.Function_:
	            localctx = new AnonymousFunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 735;
	            localctx.fun = this.match(SintesisParser.Function_);
	            this.state = 736;
	            this.match(SintesisParser.OpenParen);
	            this.state = 738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Identifier) {
	                this.state = 737;
	                localctx.pl = this.formalParameterList();
	            }

	            this.state = 740;
	            this.match(SintesisParser.CloseParen);
	            this.state = 741;
	            localctx.stmt = this.functionBody();
	            break;
	        case SintesisParser.OpenParen:
	        case SintesisParser.Identifier:
	            localctx = new ArrowFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 742;
	            localctx.pl = this.arrowFunctionParameters();
	            this.state = 743;
	            this.match(SintesisParser.ARROW);
	            this.state = 744;
	            localctx.stmt = this.arrowFunctionBody();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionParameters() {
	    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SintesisParser.RULE_arrowFunctionParameters);
	    var _la = 0; // Token type
	    try {
	        this.state = 754;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.identifier();
	            break;
	        case SintesisParser.OpenParen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 749;
	            this.match(SintesisParser.OpenParen);
	            this.state = 751;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SintesisParser.Identifier) {
	                this.state = 750;
	                this.formalParameterList();
	            }

	            this.state = 753;
	            this.match(SintesisParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionBody() {
	    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SintesisParser.RULE_arrowFunctionBody);
	    try {
	        this.state = 758;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 756;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 757;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SintesisParser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 760;
	        _la = this._input.LA(1);
	        if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (SintesisParser.MultiplyAssign - 45)) | (1 << (SintesisParser.DivideAssign - 45)) | (1 << (SintesisParser.ModulusAssign - 45)) | (1 << (SintesisParser.PlusAssign - 45)) | (1 << (SintesisParser.MinusAssign - 45)) | (1 << (SintesisParser.LeftShiftArithmeticAssign - 45)) | (1 << (SintesisParser.RightShiftArithmeticAssign - 45)) | (1 << (SintesisParser.RightShiftLogicalAssign - 45)) | (1 << (SintesisParser.BitAndAssign - 45)) | (1 << (SintesisParser.BitXorAssign - 45)) | (1 << (SintesisParser.BitOrAssign - 45)) | (1 << (SintesisParser.PowerAssign - 45)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SintesisParser.RULE_reservedWord);
	    try {
	        this.state = 765;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.Print:
	        case SintesisParser.While:
	        case SintesisParser.Repeat:
	        case SintesisParser.Times:
	        case SintesisParser.Do:
	        case SintesisParser.Continue:
	        case SintesisParser.Break:
	        case SintesisParser.Switch:
	        case SintesisParser.Case:
	        case SintesisParser.Default:
	        case SintesisParser.Each:
	        case SintesisParser.For:
	        case SintesisParser.In:
	        case SintesisParser.Of:
	        case SintesisParser.If:
	        case SintesisParser.ElseIf:
	        case SintesisParser.Else:
	        case SintesisParser.Return:
	        case SintesisParser.InstanceOf:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 762;
	            this.safeKeyword();
	            break;
	        case SintesisParser.NullLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 763;
	            this.match(SintesisParser.NullLiteral);
	            break;
	        case SintesisParser.BooleanLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 764;
	            this.match(SintesisParser.BooleanLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listDeclaration() {
	    let localctx = new ListDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SintesisParser.RULE_listDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.match(SintesisParser.New_);
	        this.state = 768;
	        this.match(SintesisParser.List);
	        this.state = 769;
	        this.match(SintesisParser.OpenParen);
	        this.state = 771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.OpenBracket) {
	            this.state = 770;
	            localctx.exp = this.listLiteral();
	        }

	        this.state = 773;
	        this.match(SintesisParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SintesisParser.RULE_listLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.match(SintesisParser.OpenBracket);
	        this.state = 784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SintesisParser.JavascriptCode) | (1 << SintesisParser.OpenBracket) | (1 << SintesisParser.OpenParen) | (1 << SintesisParser.OpenBrace) | (1 << SintesisParser.PlusPlus) | (1 << SintesisParser.MinusMinus) | (1 << SintesisParser.Plus) | (1 << SintesisParser.Minus) | (1 << SintesisParser.BitNot) | (1 << SintesisParser.Not))) !== 0) || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SintesisParser.NullLiteral - 58)) | (1 << (SintesisParser.DecimalLiteral - 58)) | (1 << (SintesisParser.HexIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral - 58)) | (1 << (SintesisParser.OctalIntegerLiteral2 - 58)) | (1 << (SintesisParser.BinaryIntegerLiteral - 58)) | (1 << (SintesisParser.BooleanLiteral - 58)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (SintesisParser.Declare - 91)) | (1 << (SintesisParser.Function_ - 91)) | (1 << (SintesisParser.NumberOf - 91)) | (1 << (SintesisParser.IndexOf - 91)) | (1 << (SintesisParser.Sub - 91)) | (1 << (SintesisParser.Lower - 91)) | (1 << (SintesisParser.Upper - 91)) | (1 << (SintesisParser.Math - 91)) | (1 << (SintesisParser.Min - 91)) | (1 << (SintesisParser.Max - 91)) | (1 << (SintesisParser.Random - 91)) | (1 << (SintesisParser.Chr - 91)) | (1 << (SintesisParser.Ord - 91)) | (1 << (SintesisParser.Prompt - 91)) | (1 << (SintesisParser.Convert - 91)) | (1 << (SintesisParser.New_ - 91)) | (1 << (SintesisParser.Attributes - 91)) | (1 << (SintesisParser.Methods - 91)) | (1 << (SintesisParser.Super - 91)) | (1 << (SintesisParser.Dictionary - 91)) | (1 << (SintesisParser.Var_ - 91)) | (1 << (SintesisParser.Const_ - 91)))) !== 0) || _la===SintesisParser.Identifier || _la===SintesisParser.StringLiteral) {
	            this.state = 776;
	            this.singleExpression(0);
	            this.state = 781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SintesisParser.Comma) {
	                this.state = 777;
	                this.match(SintesisParser.Comma);
	                this.state = 778;
	                this.singleExpression(0);
	                this.state = 783;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 786;
	        this.match(SintesisParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectLiteral() {
	    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SintesisParser.RULE_objectLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788;
	        this.match(SintesisParser.OpenBrace);
	        this.state = 802;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SintesisParser.Identifier) {
	            this.state = 789;
	            this.identifier();
	            this.state = 790;
	            this.match(SintesisParser.Colon);
	            this.state = 791;
	            this.singleExpression(0);
	            this.state = 799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SintesisParser.Comma) {
	                this.state = 792;
	                this.match(SintesisParser.Comma);
	                this.state = 793;
	                this.identifier();
	                this.state = 794;
	                this.match(SintesisParser.Colon);
	                this.state = 795;
	                this.singleExpression(0);
	                this.state = 801;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 804;
	        this.match(SintesisParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SintesisParser.RULE_literal);
	    try {
	        this.state = 813;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SintesisParser.NullLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 806;
	            this.nullLiteral();
	            break;
	        case SintesisParser.BooleanLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 807;
	            this.booleanLiteral();
	            break;
	        case SintesisParser.StringLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 808;
	            this.stringLiteral();
	            break;
	        case SintesisParser.DecimalLiteral:
	        case SintesisParser.HexIntegerLiteral:
	        case SintesisParser.OctalIntegerLiteral:
	        case SintesisParser.OctalIntegerLiteral2:
	        case SintesisParser.BinaryIntegerLiteral:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 809;
	            this.numericLiteral();
	            break;
	        case SintesisParser.OpenBracket:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 810;
	            this.listLiteral();
	            break;
	        case SintesisParser.OpenBrace:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 811;
	            this.objectLiteral();
	            break;
	        case SintesisParser.New_:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 812;
	            this.listDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SintesisParser.RULE_booleanLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this.match(SintesisParser.BooleanLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SintesisParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 817;
	        this.match(SintesisParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SintesisParser.RULE_nullLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 819;
	        this.match(SintesisParser.NullLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SintesisParser.RULE_numericLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 821;
	        _la = this._input.LA(1);
	        if(!(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (SintesisParser.DecimalLiteral - 59)) | (1 << (SintesisParser.HexIntegerLiteral - 59)) | (1 << (SintesisParser.OctalIntegerLiteral - 59)) | (1 << (SintesisParser.OctalIntegerLiteral2 - 59)) | (1 << (SintesisParser.BinaryIntegerLiteral - 59)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SintesisParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 823;
	        this.match(SintesisParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	safeKeyword() {
	    let localctx = new SafeKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SintesisParser.RULE_safeKeyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 825;
	        _la = this._input.LA(1);
	        if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SintesisParser.Print - 70)) | (1 << (SintesisParser.While - 70)) | (1 << (SintesisParser.Repeat - 70)) | (1 << (SintesisParser.Times - 70)) | (1 << (SintesisParser.Do - 70)) | (1 << (SintesisParser.Continue - 70)) | (1 << (SintesisParser.Break - 70)) | (1 << (SintesisParser.Switch - 70)) | (1 << (SintesisParser.Case - 70)) | (1 << (SintesisParser.Default - 70)) | (1 << (SintesisParser.Each - 70)) | (1 << (SintesisParser.For - 70)) | (1 << (SintesisParser.In - 70)) | (1 << (SintesisParser.Of - 70)) | (1 << (SintesisParser.If - 70)) | (1 << (SintesisParser.ElseIf - 70)) | (1 << (SintesisParser.Else - 70)) | (1 << (SintesisParser.Return - 70)))) !== 0) || _la===SintesisParser.InstanceOf)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SintesisParser.RULE_eos);
	    try {
	        this.state = 831;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 827;
	            this.match(SintesisParser.SemiColon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 828;
	            this.match(SintesisParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 829;
	            if (!( this.lineTerminatorAhead())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 830;
	            if (!( this.closeBrace())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SintesisParser.EOF = antlr4.Token.EOF;
SintesisParser.MultiLineComment = 1;
SintesisParser.SingleLineComment = 2;
SintesisParser.JavascriptCode = 3;
SintesisParser.OpenBracket = 4;
SintesisParser.CloseBracket = 5;
SintesisParser.OpenParen = 6;
SintesisParser.CloseParen = 7;
SintesisParser.OpenBrace = 8;
SintesisParser.CloseBrace = 9;
SintesisParser.SemiColon = 10;
SintesisParser.Comma = 11;
SintesisParser.Assign = 12;
SintesisParser.QuestionMark = 13;
SintesisParser.Colon = 14;
SintesisParser.Ellipsis = 15;
SintesisParser.Dot = 16;
SintesisParser.PlusPlus = 17;
SintesisParser.MinusMinus = 18;
SintesisParser.Plus = 19;
SintesisParser.Minus = 20;
SintesisParser.BitNot = 21;
SintesisParser.Not = 22;
SintesisParser.Multiply = 23;
SintesisParser.Divide = 24;
SintesisParser.Modulus = 25;
SintesisParser.Power = 26;
SintesisParser.NullCoalesce = 27;
SintesisParser.Hashtag = 28;
SintesisParser.RightShiftArithmetic = 29;
SintesisParser.LeftShiftArithmetic = 30;
SintesisParser.RightShiftLogical = 31;
SintesisParser.LessThan = 32;
SintesisParser.MoreThan = 33;
SintesisParser.LessThanEquals = 34;
SintesisParser.GreaterThanEquals = 35;
SintesisParser.Equals_ = 36;
SintesisParser.NotEquals = 37;
SintesisParser.IdentityEquals = 38;
SintesisParser.IdentityNotEquals = 39;
SintesisParser.BitAnd = 40;
SintesisParser.BitXOr = 41;
SintesisParser.BitOr = 42;
SintesisParser.And = 43;
SintesisParser.Or = 44;
SintesisParser.MultiplyAssign = 45;
SintesisParser.DivideAssign = 46;
SintesisParser.ModulusAssign = 47;
SintesisParser.PlusAssign = 48;
SintesisParser.MinusAssign = 49;
SintesisParser.LeftShiftArithmeticAssign = 50;
SintesisParser.RightShiftArithmeticAssign = 51;
SintesisParser.RightShiftLogicalAssign = 52;
SintesisParser.BitAndAssign = 53;
SintesisParser.BitXorAssign = 54;
SintesisParser.BitOrAssign = 55;
SintesisParser.PowerAssign = 56;
SintesisParser.ARROW = 57;
SintesisParser.NullLiteral = 58;
SintesisParser.DecimalLiteral = 59;
SintesisParser.HexIntegerLiteral = 60;
SintesisParser.OctalIntegerLiteral = 61;
SintesisParser.OctalIntegerLiteral2 = 62;
SintesisParser.BinaryIntegerLiteral = 63;
SintesisParser.BigHexIntegerLiteral = 64;
SintesisParser.BigOctalIntegerLiteral = 65;
SintesisParser.BigBinaryIntegerLiteral = 66;
SintesisParser.BigDecimalIntegerLiteral = 67;
SintesisParser.BooleanLiteral = 68;
SintesisParser.Step = 69;
SintesisParser.Print = 70;
SintesisParser.While = 71;
SintesisParser.Repeat = 72;
SintesisParser.Times = 73;
SintesisParser.Do = 74;
SintesisParser.Continue = 75;
SintesisParser.Break = 76;
SintesisParser.Switch = 77;
SintesisParser.Case = 78;
SintesisParser.Default = 79;
SintesisParser.Each = 80;
SintesisParser.ForEach = 81;
SintesisParser.For = 82;
SintesisParser.In = 83;
SintesisParser.Of = 84;
SintesisParser.To = 85;
SintesisParser.If = 86;
SintesisParser.Then = 87;
SintesisParser.ElseIf = 88;
SintesisParser.Else = 89;
SintesisParser.Return = 90;
SintesisParser.Declare = 91;
SintesisParser.Function_ = 92;
SintesisParser.Delete = 93;
SintesisParser.NumberOf = 94;
SintesisParser.IndexOf = 95;
SintesisParser.Sub = 96;
SintesisParser.Lower = 97;
SintesisParser.Upper = 98;
SintesisParser.Math = 99;
SintesisParser.Min = 100;
SintesisParser.Max = 101;
SintesisParser.Random = 102;
SintesisParser.Chr = 103;
SintesisParser.Ord = 104;
SintesisParser.Prompt = 105;
SintesisParser.Convert = 106;
SintesisParser.Class_ = 107;
SintesisParser.Instance = 108;
SintesisParser.New_ = 109;
SintesisParser.Extends = 110;
SintesisParser.Attributes = 111;
SintesisParser.Methods = 112;
SintesisParser.Method = 113;
SintesisParser.Constructor = 114;
SintesisParser.Super = 115;
SintesisParser.InstanceOf = 116;
SintesisParser.List = 117;
SintesisParser.Dictionary = 118;
SintesisParser.Get = 119;
SintesisParser.Set = 120;
SintesisParser.Var_ = 121;
SintesisParser.Const_ = 122;
SintesisParser.Private = 123;
SintesisParser.Public = 124;
SintesisParser.Protected = 125;
SintesisParser.Identifier = 126;
SintesisParser.StringLiteral = 127;
SintesisParser.WhiteSpaces = 128;
SintesisParser.LineTerminator = 129;

SintesisParser.RULE_program = 0;
SintesisParser.RULE_statementList = 1;
SintesisParser.RULE_statement = 2;
SintesisParser.RULE_block = 3;
SintesisParser.RULE_stepStatement = 4;
SintesisParser.RULE_emptyStatement_ = 5;
SintesisParser.RULE_printStatement = 6;
SintesisParser.RULE_expressionStatement = 7;
SintesisParser.RULE_methodCall = 8;
SintesisParser.RULE_superSuffix = 9;
SintesisParser.RULE_member = 10;
SintesisParser.RULE_memberIdentifier = 11;
SintesisParser.RULE_singleExpression = 12;
SintesisParser.RULE_basicFunction0 = 13;
SintesisParser.RULE_basicFunction1 = 14;
SintesisParser.RULE_basicFunction2 = 15;
SintesisParser.RULE_basicFunction3 = 16;
SintesisParser.RULE_basicFunction = 17;
SintesisParser.RULE_expressionSequence = 18;
SintesisParser.RULE_ifStatement = 19;
SintesisParser.RULE_elseIfs = 20;
SintesisParser.RULE_elseIf = 21;
SintesisParser.RULE_iteratorIndexes = 22;
SintesisParser.RULE_iteratorRange = 23;
SintesisParser.RULE_iterationStatement = 24;
SintesisParser.RULE_forPre = 25;
SintesisParser.RULE_continueStatement = 26;
SintesisParser.RULE_breakStatement = 27;
SintesisParser.RULE_returnStatement = 28;
SintesisParser.RULE_switchStatement = 29;
SintesisParser.RULE_caseBlock = 30;
SintesisParser.RULE_caseClauses = 31;
SintesisParser.RULE_caseClause = 32;
SintesisParser.RULE_defaultClause = 33;
SintesisParser.RULE_formalParameterList = 34;
SintesisParser.RULE_functionDeclaration = 35;
SintesisParser.RULE_functionDeclarationExpr = 36;
SintesisParser.RULE_arguments = 37;
SintesisParser.RULE_visibility = 38;
SintesisParser.RULE_classDeclaration = 39;
SintesisParser.RULE_attributesList = 40;
SintesisParser.RULE_classAttributeDecl = 41;
SintesisParser.RULE_methodDeclaration = 42;
SintesisParser.RULE_methodName = 43;
SintesisParser.RULE_methodsList = 44;
SintesisParser.RULE_classExp = 45;
SintesisParser.RULE_listIndex = 46;
SintesisParser.RULE_listIndexes = 47;
SintesisParser.RULE_formalParameterArg = 48;
SintesisParser.RULE_variableStatement = 49;
SintesisParser.RULE_variableDeclaration = 50;
SintesisParser.RULE_variableDeclarationList = 51;
SintesisParser.RULE_varModifier = 52;
SintesisParser.RULE_functionBody = 53;
SintesisParser.RULE_anonymousFunction = 54;
SintesisParser.RULE_arrowFunctionParameters = 55;
SintesisParser.RULE_arrowFunctionBody = 56;
SintesisParser.RULE_assignmentOperator = 57;
SintesisParser.RULE_reservedWord = 58;
SintesisParser.RULE_listDeclaration = 59;
SintesisParser.RULE_listLiteral = 60;
SintesisParser.RULE_objectLiteral = 61;
SintesisParser.RULE_literal = 62;
SintesisParser.RULE_booleanLiteral = 63;
SintesisParser.RULE_stringLiteral = 64;
SintesisParser.RULE_nullLiteral = 65;
SintesisParser.RULE_numericLiteral = 66;
SintesisParser.RULE_identifier = 67;
SintesisParser.RULE_safeKeyword = 68;
SintesisParser.RULE_eos = 69;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_program;
    }

	EOF() {
	    return this.getToken(SintesisParser.EOF, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitProgram(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitStatementList(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	stepStatement() {
	    return this.getTypedRuleContext(StepStatementContext,0);
	};

	printStatement() {
	    return this.getTypedRuleContext(PrintStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_block;
        this.stmt = null; // StatementListContext
    }

	OpenBrace() {
	    return this.getToken(SintesisParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(SintesisParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitBlock(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class StepStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_stepStatement;
        this.exp = null; // Token
    }

	Step() {
	    return this.getToken(SintesisParser.Step, 0);
	};

	Identifier() {
	    return this.getToken(SintesisParser.Identifier, 0);
	};

	DecimalLiteral() {
	    return this.getToken(SintesisParser.DecimalLiteral, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitStepStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_emptyStatement_;
    }

	SemiColon() {
	    return this.getToken(SintesisParser.SemiColon, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitEmptyStatement_(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class PrintStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_printStatement;
        this.exp = null; // ExpressionSequenceContext
    }

	Print() {
	    return this.getToken(SintesisParser.Print, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitPrintStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_expressionStatement;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpressionStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class MethodCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_methodCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	Super() {
	    return this.getToken(SintesisParser.Super, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitMethodCall(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class SuperSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_superSuffix;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	Dot() {
	    return this.getToken(SintesisParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitSuperSuffix(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class MemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_member;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExpAttributesContext extends MemberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Attributes() {
	    return this.getToken(SintesisParser.Attributes, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpAttributes(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpAttributesContext = ExpAttributesContext;

class ExpSuperContext extends MemberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Super() {
	    return this.getToken(SintesisParser.Super, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpSuper(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpSuperContext = ExpSuperContext;

class ExpMemberIndexContext extends MemberContext {

    constructor(parser, ctx) {
        super(parser);
        this.mem = null; // MemberContext;
        this.idx = null; // SingleExpressionContext;
        this.args = null; // ArgumentsContext;
        super.copyFrom(ctx);
    }

	OpenBracket() {
	    return this.getToken(SintesisParser.OpenBracket, 0);
	};

	CloseBracket() {
	    return this.getToken(SintesisParser.CloseBracket, 0);
	};

	member() {
	    return this.getTypedRuleContext(MemberContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpMemberIndex(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpMemberIndexContext = ExpMemberIndexContext;

class ExpIdentifierContext extends MemberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpIdentifier(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpIdentifierContext = ExpIdentifierContext;

class ExpMethodsContext extends MemberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Methods() {
	    return this.getToken(SintesisParser.Methods, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpMethods(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpMethodsContext = ExpMethodsContext;

class ExpNewContext extends MemberContext {

    constructor(parser, ctx) {
        super(parser);
        this.id = null; // Token;
        this.args = null; // ArgumentsContext;
        super.copyFrom(ctx);
    }

	New_() {
	    return this.getToken(SintesisParser.New_, 0);
	};

	Identifier() {
	    return this.getToken(SintesisParser.Identifier, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	Instance() {
	    return this.getToken(SintesisParser.Instance, 0);
	};

	Of() {
	    return this.getToken(SintesisParser.Of, 0);
	};

	Class_() {
	    return this.getToken(SintesisParser.Class_, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpNew(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpNewContext = ExpNewContext;

class ExpMemberFuncContext extends MemberContext {

    constructor(parser, ctx) {
        super(parser);
        this.mem = null; // MemberContext;
        this.args = null; // ArgumentsContext;
        super.copyFrom(ctx);
    }

	member() {
	    return this.getTypedRuleContext(MemberContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpMemberFunc(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpMemberFuncContext = ExpMemberFuncContext;

class ExpMemberDotContext extends MemberContext {

    constructor(parser, ctx) {
        super(parser);
        this.mem = null; // MemberContext;
        this.idx = null; // MemberIdentifierContext;
        this.args = null; // ArgumentsContext;
        super.copyFrom(ctx);
    }

	Dot() {
	    return this.getToken(SintesisParser.Dot, 0);
	};

	member() {
	    return this.getTypedRuleContext(MemberContext,0);
	};

	memberIdentifier() {
	    return this.getTypedRuleContext(MemberIdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpMemberDot(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpMemberDotContext = ExpMemberDotContext;

class MemberIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_memberIdentifier;
    }

	Attributes() {
	    return this.getToken(SintesisParser.Attributes, 0);
	};

	Methods() {
	    return this.getToken(SintesisParser.Methods, 0);
	};

	Super() {
	    return this.getToken(SintesisParser.Super, 0);
	};

	Constructor() {
	    return this.getToken(SintesisParser.Constructor, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitMemberIdentifier(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_singleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExpVarContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpVar(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpVarContext = ExpVarContext;

class ExpBitNotContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        this.exp = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	BitNot() {
	    return this.getToken(SintesisParser.BitNot, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpBitNot(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpBitNotContext = ExpBitNotContext;

class ExpAssignmentContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dest = null; // MemberContext;
        this.exp = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	Assign() {
	    return this.getToken(SintesisParser.Assign, 0);
	};

	member() {
	    return this.getTypedRuleContext(MemberContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpAssignment(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpAssignmentContext = ExpAssignmentContext;

class ExpBasicFunctionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.fn = null; // BasicFunctionContext;
        this.args = null; // ArgumentsContext;
        super.copyFrom(ctx);
    }

	basicFunction() {
	    return this.getTypedRuleContext(BasicFunctionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpBasicFunction(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpBasicFunctionContext = ExpBasicFunctionContext;

class ExpMathContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.fn = null; // Token;
        this.args = null; // ArgumentsContext;
        super.copyFrom(ctx);
    }

	Math() {
	    return this.getToken(SintesisParser.Math, 0);
	};

	Dot() {
	    return this.getToken(SintesisParser.Dot, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	Identifier() {
	    return this.getToken(SintesisParser.Identifier, 0);
	};

	Min() {
	    return this.getToken(SintesisParser.Min, 0);
	};

	Max() {
	    return this.getToken(SintesisParser.Max, 0);
	};

	Random() {
	    return this.getToken(SintesisParser.Random, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpMath(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpMathContext = ExpMathContext;

class ExpFunctionExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	anonymousFunction() {
	    return this.getTypedRuleContext(AnonymousFunctionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpFunctionExpression(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpFunctionExpressionContext = ExpFunctionExpressionContext;

class ExpPreIncrementContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        this.dest = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(SintesisParser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(SintesisParser.MinusMinus, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpPreIncrement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpPreIncrementContext = ExpPreIncrementContext;

class ExpUnaryMinusContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(SintesisParser.Minus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpUnaryMinus(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpUnaryMinusContext = ExpUnaryMinusContext;

class ExpTernaryContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.cond = null; // SingleExpressionContext;
        this.ok = null; // SingleExpressionContext;
        this.no = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	QuestionMark() {
	    return this.getToken(SintesisParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(SintesisParser.Colon, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpTernary(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpTernaryContext = ExpTernaryContext;

class ExpJavascriptContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JavascriptCode() {
	    return this.getToken(SintesisParser.JavascriptCode, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpJavascript(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpJavascriptContext = ExpJavascriptContext;

class ExpParenthesisContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpParenthesis(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpParenthesisContext = ExpParenthesisContext;

class ExpPostIncrementContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dest = null; // SingleExpressionContext;
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(SintesisParser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(SintesisParser.MinusMinus, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpPostIncrement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpPostIncrementContext = ExpPostIncrementContext;

class ExpInstanceOfContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.e1 = null; // SingleExpressionContext;
        this.e2 = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	InstanceOf() {
	    return this.getToken(SintesisParser.InstanceOf, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpInstanceOf(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpInstanceOfContext = ExpInstanceOfContext;

class ExpAssignmentOperatorContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dest = null; // MemberContext;
        this.op = null; // AssignmentOperatorContext;
        this.exp = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	member() {
	    return this.getTypedRuleContext(MemberContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpAssignmentOperator(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpAssignmentOperatorContext = ExpAssignmentOperatorContext;

class ExpUnaryPlusContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	Plus() {
	    return this.getToken(SintesisParser.Plus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpUnaryPlus(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpUnaryPlusContext = ExpUnaryPlusContext;

class ExpLiteralContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpLiteral(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpLiteralContext = ExpLiteralContext;

class ExpMemberContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	member() {
	    return this.getTypedRuleContext(MemberContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpMember(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpMemberContext = ExpMemberContext;

class ExpOpContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.e1 = null; // SingleExpressionContext;
        this.op = null; // Token;
        this.e2 = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Modulus() {
	    return this.getToken(SintesisParser.Modulus, 0);
	};

	Multiply() {
	    return this.getToken(SintesisParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(SintesisParser.Divide, 0);
	};

	Plus() {
	    return this.getToken(SintesisParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(SintesisParser.Minus, 0);
	};

	RightShiftArithmetic() {
	    return this.getToken(SintesisParser.RightShiftArithmetic, 0);
	};

	LeftShiftArithmetic() {
	    return this.getToken(SintesisParser.LeftShiftArithmetic, 0);
	};

	RightShiftLogical() {
	    return this.getToken(SintesisParser.RightShiftLogical, 0);
	};

	Power() {
	    return this.getToken(SintesisParser.Power, 0);
	};

	LessThan() {
	    return this.getToken(SintesisParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(SintesisParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(SintesisParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(SintesisParser.GreaterThanEquals, 0);
	};

	IdentityEquals() {
	    return this.getToken(SintesisParser.IdentityEquals, 0);
	};

	IdentityNotEquals() {
	    return this.getToken(SintesisParser.IdentityNotEquals, 0);
	};

	Equals_() {
	    return this.getToken(SintesisParser.Equals_, 0);
	};

	NotEquals() {
	    return this.getToken(SintesisParser.NotEquals, 0);
	};

	BitAnd() {
	    return this.getToken(SintesisParser.BitAnd, 0);
	};

	BitOr() {
	    return this.getToken(SintesisParser.BitOr, 0);
	};

	BitXOr() {
	    return this.getToken(SintesisParser.BitXOr, 0);
	};

	And() {
	    return this.getToken(SintesisParser.And, 0);
	};

	Or() {
	    return this.getToken(SintesisParser.Or, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpOp(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpOpContext = ExpOpContext;

class ExpNotContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        this.exp = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(SintesisParser.Not, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpNot(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ExpNotContext = ExpNotContext;

class BasicFunction0Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_basicFunction0;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RandomContext extends BasicFunction0Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Random() {
	    return this.getToken(SintesisParser.Random, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitRandom(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.RandomContext = RandomContext;

class BasicFunction1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_basicFunction1;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OrdContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Ord() {
	    return this.getToken(SintesisParser.Ord, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitOrd(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.OrdContext = OrdContext;

class DictionaryContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Dictionary() {
	    return this.getToken(SintesisParser.Dictionary, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitDictionary(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.DictionaryContext = DictionaryContext;

class MinContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Min() {
	    return this.getToken(SintesisParser.Min, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitMin(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.MinContext = MinContext;

class MaxContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Max() {
	    return this.getToken(SintesisParser.Max, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitMax(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.MaxContext = MaxContext;

class LowerContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Lower() {
	    return this.getToken(SintesisParser.Lower, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitLower(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.LowerContext = LowerContext;

class UpperContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Upper() {
	    return this.getToken(SintesisParser.Upper, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitUpper(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.UpperContext = UpperContext;

class ChrContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Chr() {
	    return this.getToken(SintesisParser.Chr, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitChr(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ChrContext = ChrContext;

class PromptContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Prompt() {
	    return this.getToken(SintesisParser.Prompt, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitPrompt(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.PromptContext = PromptContext;

class NumberOfContext extends BasicFunction1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NumberOf() {
	    return this.getToken(SintesisParser.NumberOf, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitNumberOf(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.NumberOfContext = NumberOfContext;

class BasicFunction2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_basicFunction2;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConvertContext extends BasicFunction2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Convert() {
	    return this.getToken(SintesisParser.Convert, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitConvert(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ConvertContext = ConvertContext;

class IndexOfContext extends BasicFunction2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IndexOf() {
	    return this.getToken(SintesisParser.IndexOf, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitIndexOf(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.IndexOfContext = IndexOfContext;

class BasicFunction3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_basicFunction3;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubContext extends BasicFunction3Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sub() {
	    return this.getToken(SintesisParser.Sub, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitSub(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.SubContext = SubContext;

class BasicFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_basicFunction;
    }

	basicFunction0() {
	    return this.getTypedRuleContext(BasicFunction0Context,0);
	};

	basicFunction1() {
	    return this.getTypedRuleContext(BasicFunction1Context,0);
	};

	basicFunction2() {
	    return this.getTypedRuleContext(BasicFunction2Context,0);
	};

	basicFunction3() {
	    return this.getTypedRuleContext(BasicFunction3Context,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitBasicFunction(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_expressionSequence;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Comma);
	    } else {
	        return this.getToken(SintesisParser.Comma, i);
	    }
	};


	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitExpressionSequence(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_ifStatement;
        this.exp = null; // SingleExpressionContext
        this.stmt = null; // StatementContext
        this.elseifs = null; // ElseIfsContext
        this.elsestmt_ = null; // StatementContext
    }

	If() {
	    return this.getToken(SintesisParser.If, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Then = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Then);
	    } else {
	        return this.getToken(SintesisParser.Then, i);
	    }
	};


	Else() {
	    return this.getToken(SintesisParser.Else, 0);
	};

	elseIfs() {
	    return this.getTypedRuleContext(ElseIfsContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitIfStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ElseIfsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_elseIfs;
    }

	elseIf = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElseIfContext);
	    } else {
	        return this.getTypedRuleContext(ElseIfContext,i);
	    }
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitElseIfs(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ElseIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_elseIf;
        this.exp = null; // SingleExpressionContext
        this.stmt = null; // StatementContext
    }

	ElseIf() {
	    return this.getToken(SintesisParser.ElseIf, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Then() {
	    return this.getToken(SintesisParser.Then, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitElseIf(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class IteratorIndexesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_iteratorIndexes;
        this.idv = null; // Token
        this.op = null; // Token
        this.coll = null; // SingleExpressionContext
        this.idk = null; // Token
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Identifier);
	    } else {
	        return this.getToken(SintesisParser.Identifier, i);
	    }
	};


	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	In() {
	    return this.getToken(SintesisParser.In, 0);
	};

	Of() {
	    return this.getToken(SintesisParser.Of, 0);
	};

	Comma() {
	    return this.getToken(SintesisParser.Comma, 0);
	};

	ARROW() {
	    return this.getToken(SintesisParser.ARROW, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitIteratorIndexes(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class IteratorRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_iteratorRange;
        this.vvar = null; // Token
        this.id = null; // IdentifierContext
        this.start = null; // SingleExpressionContext
        this.to = null; // SingleExpressionContext
    }

	To() {
	    return this.getToken(SintesisParser.To, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Assign() {
	    return this.getToken(SintesisParser.Assign, 0);
	};

	In() {
	    return this.getToken(SintesisParser.In, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Var_() {
	    return this.getToken(SintesisParser.Var_, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitIteratorRange(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RepeatWhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // StatementContext;
        this.exp = null; // SingleExpressionContext;
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(SintesisParser.While, 0);
	};

	Repeat() {
	    return this.getToken(SintesisParser.Repeat, 0);
	};

	Do() {
	    return this.getToken(SintesisParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitRepeatWhileStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.RepeatWhileStatementContext = RepeatWhileStatementContext;

class RepeatStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // SingleExpressionContext;
        this.stmt = null; // StatementContext;
        super.copyFrom(ctx);
    }

	Repeat() {
	    return this.getToken(SintesisParser.Repeat, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Times() {
	    return this.getToken(SintesisParser.Times, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitRepeatStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.RepeatStatementContext = RepeatStatementContext;

class ForEachStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.iter = null; // IteratorIndexesContext;
        this.stmt = null; // StatementContext;
        super.copyFrom(ctx);
    }

	iteratorIndexes() {
	    return this.getTypedRuleContext(IteratorIndexesContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	For() {
	    return this.getToken(SintesisParser.For, 0);
	};

	ForEach() {
	    return this.getToken(SintesisParser.ForEach, 0);
	};

	Repeat() {
	    return this.getToken(SintesisParser.Repeat, 0);
	};

	Do() {
	    return this.getToken(SintesisParser.Do, 0);
	};

	Each() {
	    return this.getToken(SintesisParser.Each, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitForEachStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ForEachStatementContext = ForEachStatementContext;

class ForEachStatement2Context extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.iter = null; // IteratorIndexesContext;
        this.stmt = null; // StatementContext;
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	iteratorIndexes() {
	    return this.getTypedRuleContext(IteratorIndexesContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	For() {
	    return this.getToken(SintesisParser.For, 0);
	};

	ForEach() {
	    return this.getToken(SintesisParser.ForEach, 0);
	};

	Repeat() {
	    return this.getToken(SintesisParser.Repeat, 0);
	};

	Do() {
	    return this.getToken(SintesisParser.Do, 0);
	};

	Each() {
	    return this.getToken(SintesisParser.Each, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitForEachStatement2(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ForEachStatement2Context = ForEachStatement2Context;

class ForClassicContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pre = null; // ForPreContext;
        this.exp = null; // ExpressionSequenceContext;
        this.post = null; // ExpressionSequenceContext;
        this.stmt = null; // StatementContext;
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(SintesisParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.SemiColon);
	    } else {
	        return this.getToken(SintesisParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	forPre() {
	    return this.getTypedRuleContext(ForPreContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitForClassic(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ForClassicContext = ForClassicContext;

class ForFromToStatement2Context extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.iter = null; // IteratorRangeContext;
        this.stmt = null; // StatementContext;
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(SintesisParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	iteratorRange() {
	    return this.getTypedRuleContext(IteratorRangeContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Repeat() {
	    return this.getToken(SintesisParser.Repeat, 0);
	};

	Do() {
	    return this.getToken(SintesisParser.Do, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitForFromToStatement2(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ForFromToStatement2Context = ForFromToStatement2Context;

class WhileRepeatStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // SingleExpressionContext;
        this.stmt = null; // StatementContext;
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(SintesisParser.While, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Repeat = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Repeat);
	    } else {
	        return this.getToken(SintesisParser.Repeat, i);
	    }
	};


	Do() {
	    return this.getToken(SintesisParser.Do, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitWhileRepeatStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.WhileRepeatStatementContext = WhileRepeatStatementContext;

class ForFromToStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.iter = null; // IteratorRangeContext;
        this.stmt = null; // StatementContext;
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(SintesisParser.For, 0);
	};

	iteratorRange() {
	    return this.getTypedRuleContext(IteratorRangeContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Repeat() {
	    return this.getToken(SintesisParser.Repeat, 0);
	};

	Do() {
	    return this.getToken(SintesisParser.Do, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitForFromToStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ForFromToStatementContext = ForFromToStatementContext;

class ForPreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_forPre;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitForPre(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(SintesisParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitContinueStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(SintesisParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitBreakStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_returnStatement;
        this.exp = null; // SingleExpressionContext
    }

	Return() {
	    return this.getToken(SintesisParser.Return, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitReturnStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(SintesisParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitSwitchStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(SintesisParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(SintesisParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitCaseBlock(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitCaseClauses(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(SintesisParser.Case, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	Colon() {
	    return this.getToken(SintesisParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitCaseClause(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(SintesisParser.Default, 0);
	};

	Colon() {
	    return this.getToken(SintesisParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitDefaultClause(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_formalParameterList;
    }

	formalParameterArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterArgContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterArgContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Comma);
	    } else {
	        return this.getToken(SintesisParser.Comma, i);
	    }
	};


	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitFormalParameterList(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_functionDeclaration;
        this.dec = null; // Token
        this.fun = null; // Token
        this.id = null; // IdentifierContext
        this.pl = null; // FormalParameterListContext
        this.stmt = null; // FunctionBodyContext
    }

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	Function_() {
	    return this.getToken(SintesisParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Declare() {
	    return this.getToken(SintesisParser.Declare, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitFunctionDeclaration(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclarationExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_functionDeclarationExpr;
        this.fun = null; // Token
        this.id = null; // IdentifierContext
        this.pl = null; // FormalParameterListContext
        this.stmt = null; // FunctionBodyContext
    }

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	Function_() {
	    return this.getToken(SintesisParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitFunctionDeclarationExpr(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Comma);
	    } else {
	        return this.getToken(SintesisParser.Comma, i);
	    }
	};


	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitArguments(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class VisibilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_visibility;
    }

	Public() {
	    return this.getToken(SintesisParser.Public, 0);
	};

	Private() {
	    return this.getToken(SintesisParser.Private, 0);
	};

	Protected() {
	    return this.getToken(SintesisParser.Protected, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitVisibility(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_classDeclaration;
        this.dec = null; // Token
        this.clas = null; // Token
        this.id = null; // IdentifierContext
        this.ext = null; // IdentifierContext
        this.atrs = null; // AttributesListContext
        this.mdec = null; // Token
        this.methods = null; // MethodsListContext
    }

	OpenBrace = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.OpenBrace);
	    } else {
	        return this.getToken(SintesisParser.OpenBrace, i);
	    }
	};


	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	CloseBrace = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.CloseBrace);
	    } else {
	        return this.getToken(SintesisParser.CloseBrace, i);
	    }
	};


	Class_() {
	    return this.getToken(SintesisParser.Class_, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	Extends() {
	    return this.getToken(SintesisParser.Extends, 0);
	};

	Declare() {
	    return this.getToken(SintesisParser.Declare, 0);
	};

	Attributes() {
	    return this.getToken(SintesisParser.Attributes, 0);
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Colon);
	    } else {
	        return this.getToken(SintesisParser.Colon, i);
	    }
	};


	attributesList() {
	    return this.getTypedRuleContext(AttributesListContext,0);
	};

	methodsList() {
	    return this.getTypedRuleContext(MethodsListContext,0);
	};

	Methods() {
	    return this.getToken(SintesisParser.Methods, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitClassDeclaration(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class AttributesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_attributesList;
    }

	classAttributeDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassAttributeDeclContext);
	    } else {
	        return this.getTypedRuleContext(ClassAttributeDeclContext,i);
	    }
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitAttributesList(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ClassAttributeDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_classAttributeDecl;
        this.vis = null; // VisibilityContext
    }

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Comma);
	    } else {
	        return this.getToken(SintesisParser.Comma, i);
	    }
	};


	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitClassAttributeDecl(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_methodDeclaration;
        this.vis = null; // VisibilityContext
        this.mname = null; // Token
        this.id = null; // MethodNameContext
        this.pl = null; // FormalParameterListContext
        this.stmt = null; // FunctionBodyContext
    }

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	Method() {
	    return this.getToken(SintesisParser.Method, 0);
	};

	Function_() {
	    return this.getToken(SintesisParser.Function_, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitMethodDeclaration(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class MethodNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_methodName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Constructor() {
	    return this.getToken(SintesisParser.Constructor, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitMethodName(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class MethodsListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_methodsList;
    }

	methodDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(MethodDeclarationContext,i);
	    }
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitMethodsList(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ClassExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_classExp;
        this.args = null; // ArgumentsContext
    }

	New_() {
	    return this.getToken(SintesisParser.New_, 0);
	};

	Identifier() {
	    return this.getToken(SintesisParser.Identifier, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	Instance() {
	    return this.getToken(SintesisParser.Instance, 0);
	};

	Of() {
	    return this.getToken(SintesisParser.Of, 0);
	};

	Class_() {
	    return this.getToken(SintesisParser.Class_, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitClassExp(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ListIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_listIndex;
    }

	OpenBracket() {
	    return this.getToken(SintesisParser.OpenBracket, 0);
	};

	CloseBracket() {
	    return this.getToken(SintesisParser.CloseBracket, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitListIndex(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ListIndexesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_listIndexes;
    }

	listIndex = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListIndexContext);
	    } else {
	        return this.getTypedRuleContext(ListIndexContext,i);
	    }
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitListIndexes(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class FormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_formalParameterArg;
        this.dest = null; // IdentifierContext
        this.exp = null; // SingleExpressionContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Assign() {
	    return this.getToken(SintesisParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitFormalParameterArg(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class VariableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_variableStatement;
    }

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitVariableStatement(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_variableDeclaration;
        this.dest = null; // IdentifierContext
        this.exp = null; // SingleExpressionContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Assign() {
	    return this.getToken(SintesisParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitVariableDeclaration(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_variableDeclarationList;
    }

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Comma);
	    } else {
	        return this.getToken(SintesisParser.Comma, i);
	    }
	};


	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitVariableDeclarationList(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class VarModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_varModifier;
    }

	Declare() {
	    return this.getToken(SintesisParser.Declare, 0);
	};

	Var_() {
	    return this.getToken(SintesisParser.Var_, 0);
	};

	Const_() {
	    return this.getToken(SintesisParser.Const_, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitVarModifier(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_functionBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitFunctionBody(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class AnonymousFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_anonymousFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnonymousFunctionDeclContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.fun = null; // Token;
        this.pl = null; // FormalParameterListContext;
        this.stmt = null; // FunctionBodyContext;
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	Function_() {
	    return this.getToken(SintesisParser.Function_, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitAnonymousFunctionDecl(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.AnonymousFunctionDeclContext = AnonymousFunctionDeclContext;

class ArrowFunctionContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.pl = null; // ArrowFunctionParametersContext;
        this.stmt = null; // ArrowFunctionBodyContext;
        super.copyFrom(ctx);
    }

	ARROW() {
	    return this.getToken(SintesisParser.ARROW, 0);
	};

	arrowFunctionParameters() {
	    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
	};

	arrowFunctionBody() {
	    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitArrowFunction(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}

SintesisParser.ArrowFunctionContext = ArrowFunctionContext;

class ArrowFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_arrowFunctionParameters;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitArrowFunctionParameters(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ArrowFunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_arrowFunctionBody;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitArrowFunctionBody(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(SintesisParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(SintesisParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(SintesisParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(SintesisParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(SintesisParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(SintesisParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(SintesisParser.RightShiftArithmeticAssign, 0);
	};

	RightShiftLogicalAssign() {
	    return this.getToken(SintesisParser.RightShiftLogicalAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(SintesisParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(SintesisParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(SintesisParser.BitOrAssign, 0);
	};

	PowerAssign() {
	    return this.getToken(SintesisParser.PowerAssign, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitAssignmentOperator(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_reservedWord;
    }

	safeKeyword() {
	    return this.getTypedRuleContext(SafeKeywordContext,0);
	};

	NullLiteral() {
	    return this.getToken(SintesisParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(SintesisParser.BooleanLiteral, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitReservedWord(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ListDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_listDeclaration;
        this.exp = null; // ListLiteralContext
    }

	New_() {
	    return this.getToken(SintesisParser.New_, 0);
	};

	List() {
	    return this.getToken(SintesisParser.List, 0);
	};

	OpenParen() {
	    return this.getToken(SintesisParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(SintesisParser.CloseParen, 0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitListDeclaration(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_listLiteral;
    }

	OpenBracket() {
	    return this.getToken(SintesisParser.OpenBracket, 0);
	};

	CloseBracket() {
	    return this.getToken(SintesisParser.CloseBracket, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Comma);
	    } else {
	        return this.getToken(SintesisParser.Comma, i);
	    }
	};


	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitListLiteral(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class ObjectLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_objectLiteral;
    }

	OpenBrace() {
	    return this.getToken(SintesisParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(SintesisParser.CloseBrace, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Colon);
	    } else {
	        return this.getToken(SintesisParser.Colon, i);
	    }
	};


	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SintesisParser.Comma);
	    } else {
	        return this.getToken(SintesisParser.Comma, i);
	    }
	};


	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitObjectLiteral(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_literal;
    }

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	listDeclaration() {
	    return this.getTypedRuleContext(ListDeclarationContext,0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitLiteral(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_booleanLiteral;
    }

	BooleanLiteral() {
	    return this.getToken(SintesisParser.BooleanLiteral, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitBooleanLiteral(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_stringLiteral;
    }

	StringLiteral() {
	    return this.getToken(SintesisParser.StringLiteral, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitStringLiteral(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_nullLiteral;
    }

	NullLiteral() {
	    return this.getToken(SintesisParser.NullLiteral, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitNullLiteral(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_numericLiteral;
    }

	DecimalLiteral() {
	    return this.getToken(SintesisParser.DecimalLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(SintesisParser.HexIntegerLiteral, 0);
	};

	OctalIntegerLiteral() {
	    return this.getToken(SintesisParser.OctalIntegerLiteral, 0);
	};

	OctalIntegerLiteral2() {
	    return this.getToken(SintesisParser.OctalIntegerLiteral2, 0);
	};

	BinaryIntegerLiteral() {
	    return this.getToken(SintesisParser.BinaryIntegerLiteral, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitNumericLiteral(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(SintesisParser.Identifier, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitIdentifier(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class SafeKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_safeKeyword;
    }

	Return() {
	    return this.getToken(SintesisParser.Return, 0);
	};

	While() {
	    return this.getToken(SintesisParser.While, 0);
	};

	Continue() {
	    return this.getToken(SintesisParser.Continue, 0);
	};

	Break() {
	    return this.getToken(SintesisParser.Break, 0);
	};

	Each() {
	    return this.getToken(SintesisParser.Each, 0);
	};

	For() {
	    return this.getToken(SintesisParser.For, 0);
	};

	Of() {
	    return this.getToken(SintesisParser.Of, 0);
	};

	In() {
	    return this.getToken(SintesisParser.In, 0);
	};

	Do() {
	    return this.getToken(SintesisParser.Do, 0);
	};

	InstanceOf() {
	    return this.getToken(SintesisParser.InstanceOf, 0);
	};

	Default() {
	    return this.getToken(SintesisParser.Default, 0);
	};

	Case() {
	    return this.getToken(SintesisParser.Case, 0);
	};

	Times() {
	    return this.getToken(SintesisParser.Times, 0);
	};

	Switch() {
	    return this.getToken(SintesisParser.Switch, 0);
	};

	Print() {
	    return this.getToken(SintesisParser.Print, 0);
	};

	If() {
	    return this.getToken(SintesisParser.If, 0);
	};

	ElseIf() {
	    return this.getToken(SintesisParser.ElseIf, 0);
	};

	Else() {
	    return this.getToken(SintesisParser.Else, 0);
	};

	Repeat() {
	    return this.getToken(SintesisParser.Repeat, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitSafeKeyword(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SintesisParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(SintesisParser.SemiColon, 0);
	};

	EOF() {
	    return this.getToken(SintesisParser.EOF, 0);
	};

	 accept(visitor) {
	    if ( visitor instanceof SintesisParserVisitor ) {
	        return  visitor.visitEos(this);
	    } else {
	        return  visitor.visitChildren(this);
	    }
	}


}




SintesisParser.ProgramContext = ProgramContext; 
SintesisParser.StatementListContext = StatementListContext; 
SintesisParser.StatementContext = StatementContext; 
SintesisParser.BlockContext = BlockContext; 
SintesisParser.StepStatementContext = StepStatementContext; 
SintesisParser.EmptyStatement_Context = EmptyStatement_Context; 
SintesisParser.PrintStatementContext = PrintStatementContext; 
SintesisParser.ExpressionStatementContext = ExpressionStatementContext; 
SintesisParser.MethodCallContext = MethodCallContext; 
SintesisParser.SuperSuffixContext = SuperSuffixContext; 
SintesisParser.MemberContext = MemberContext; 
SintesisParser.MemberIdentifierContext = MemberIdentifierContext; 
SintesisParser.SingleExpressionContext = SingleExpressionContext; 
SintesisParser.BasicFunction0Context = BasicFunction0Context; 
SintesisParser.BasicFunction1Context = BasicFunction1Context; 
SintesisParser.BasicFunction2Context = BasicFunction2Context; 
SintesisParser.BasicFunction3Context = BasicFunction3Context; 
SintesisParser.BasicFunctionContext = BasicFunctionContext; 
SintesisParser.ExpressionSequenceContext = ExpressionSequenceContext; 
SintesisParser.IfStatementContext = IfStatementContext; 
SintesisParser.ElseIfsContext = ElseIfsContext; 
SintesisParser.ElseIfContext = ElseIfContext; 
SintesisParser.IteratorIndexesContext = IteratorIndexesContext; 
SintesisParser.IteratorRangeContext = IteratorRangeContext; 
SintesisParser.IterationStatementContext = IterationStatementContext; 
SintesisParser.ForPreContext = ForPreContext; 
SintesisParser.ContinueStatementContext = ContinueStatementContext; 
SintesisParser.BreakStatementContext = BreakStatementContext; 
SintesisParser.ReturnStatementContext = ReturnStatementContext; 
SintesisParser.SwitchStatementContext = SwitchStatementContext; 
SintesisParser.CaseBlockContext = CaseBlockContext; 
SintesisParser.CaseClausesContext = CaseClausesContext; 
SintesisParser.CaseClauseContext = CaseClauseContext; 
SintesisParser.DefaultClauseContext = DefaultClauseContext; 
SintesisParser.FormalParameterListContext = FormalParameterListContext; 
SintesisParser.FunctionDeclarationContext = FunctionDeclarationContext; 
SintesisParser.FunctionDeclarationExprContext = FunctionDeclarationExprContext; 
SintesisParser.ArgumentsContext = ArgumentsContext; 
SintesisParser.VisibilityContext = VisibilityContext; 
SintesisParser.ClassDeclarationContext = ClassDeclarationContext; 
SintesisParser.AttributesListContext = AttributesListContext; 
SintesisParser.ClassAttributeDeclContext = ClassAttributeDeclContext; 
SintesisParser.MethodDeclarationContext = MethodDeclarationContext; 
SintesisParser.MethodNameContext = MethodNameContext; 
SintesisParser.MethodsListContext = MethodsListContext; 
SintesisParser.ClassExpContext = ClassExpContext; 
SintesisParser.ListIndexContext = ListIndexContext; 
SintesisParser.ListIndexesContext = ListIndexesContext; 
SintesisParser.FormalParameterArgContext = FormalParameterArgContext; 
SintesisParser.VariableStatementContext = VariableStatementContext; 
SintesisParser.VariableDeclarationContext = VariableDeclarationContext; 
SintesisParser.VariableDeclarationListContext = VariableDeclarationListContext; 
SintesisParser.VarModifierContext = VarModifierContext; 
SintesisParser.FunctionBodyContext = FunctionBodyContext; 
SintesisParser.AnonymousFunctionContext = AnonymousFunctionContext; 
SintesisParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext; 
SintesisParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext; 
SintesisParser.AssignmentOperatorContext = AssignmentOperatorContext; 
SintesisParser.ReservedWordContext = ReservedWordContext; 
SintesisParser.ListDeclarationContext = ListDeclarationContext; 
SintesisParser.ListLiteralContext = ListLiteralContext; 
SintesisParser.ObjectLiteralContext = ObjectLiteralContext; 
SintesisParser.LiteralContext = LiteralContext; 
SintesisParser.BooleanLiteralContext = BooleanLiteralContext; 
SintesisParser.StringLiteralContext = StringLiteralContext; 
SintesisParser.NullLiteralContext = NullLiteralContext; 
SintesisParser.NumericLiteralContext = NumericLiteralContext; 
SintesisParser.IdentifierContext = IdentifierContext; 
SintesisParser.SafeKeywordContext = SafeKeywordContext; 
SintesisParser.EosContext = EosContext; 
